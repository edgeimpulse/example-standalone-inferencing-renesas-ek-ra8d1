/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.03.2023 16:41:50

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 241424;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[71];
TfLiteEvalTensor tflEvalTensors[71];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 52,-1,29, 0,-20,12, -127,-117,-70, 
  /* [1][1][][] */ 7,-5,-4, -18,2,-8, 1,-35,3, 
  /* [1][2][][] */ 2,14,-6, 1,5,-4, 42,-22,11, 
  /* [2][0][][] */ 24,-25,-11, 78,112,1, 51,-45,11, 
  /* [2][1][][] */ 1,-4,-5, 73,127,-29, 30,-7,-3, 
  /* [2][2][][] */ 40,-92,16, 73,-64,-25, 37,-66,18, 
  /* [3][0][][] */ 15,37,9, 35,95,23, -7,-4,-11, 
  /* [3][1][][] */ 28,44,15, 71,127,31, -21,-29,-3, 
  /* [3][2][][] */ 9,4,10, 22,15,7, -13,-14,-4, 
  /* [4][0][][] */ 42,59,10, 24,61,8, -4,-6,17, 
  /* [4][1][][] */ 43,83,75, 41,100,52, 34,34,1, 
  /* [4][2][][] */ 52,75,55, 50,127,35, -29,10,33, 
  /* [5][0][][] */ 28,26,-113, 12,21,-109, 1,42,-39, 
  /* [5][1][][] */ 21,-26,-127, 11,-32,-124, 4,24,-35, 
  /* [5][2][][] */ 11,25,-16, 14,13,-5, 8,24,-19, 
  /* [6][0][][] */ 23,-65,32, 46,-87,39, 11,-19,12, 
  /* [6][1][][] */ 35,-97,60, 62,-127,71, 7,-28,18, 
  /* [6][2][][] */ 20,-34,13, 15,-42,27, -11,9,1, 
  /* [7][0][][] */ -23,26,12, -93,-31,6, -21,23,3, 
  /* [7][1][][] */ -14,-2,4, -127,-88,-6, -5,-2,8, 
  /* [7][2][][] */ -27,30,-8, -21,9,-1, -26,23,-3, 
  /* [8][0][][] */ -113,-107,-120, -115,-107,-122, -104,-97,-112, 
  /* [8][1][][] */ -112,-107,-121, -114,-109,-123, -102,-97,-112, 
  /* [8][2][][] */ -120,-115,-127, -121,-114,-127, -113,-104,-81, 
  /* [9][0][][] */ -26,-3,11, -15,-4,4, -2,-7,-20, 
  /* [9][1][][] */ 104,106,-20, 85,127,15, -7,16,28, 
  /* [9][2][][] */ -33,-53,1, 2,-54,-11, 16,-3,-23, 
  /* [10][0][][] */ -24,-82,-18, 34,95,20, -8,-12,-2, 
  /* [10][1][][] */ -58,-102,-14, 79,127,14, -16,-25,0, 
  /* [10][2][][] */ -31,-19,2, 37,23,-11, -8,0,7, 
  /* [11][0][][] */ -10,-22,2, 6,-46,1, 9,-100,-53, 
  /* [11][1][][] */ -42,-39,-16, -36,-65,-39, -13,-59,-53, 
  /* [11][2][][] */ -3,-34,-73, 118,127,65, -35,15,-43, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-97,-17, -60,-111,-25, -8,-18,-6, 
  /* [13][1][][] */ 62,114,15, 58,127,25, 8,15,10, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 1,4,-4, 
  /* [14][0][][] */ 45,-9,-38, 80,-23,-45, 34,-6,-18, 
  /* [14][1][][] */ 87,-18,-73, 127,-36,-83, 60,-15,-35, 
  /* [14][2][][] */ 53,-10,-45, 74,-18,-48, 26,-5,-18, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 3.3410194077987398e-07, 0.041718672960996628, 0.05604703351855278, 0.0089088054373860359, 0.0024157108273357153, 0.064475961029529572, 0.029559502378106117, 0.066162213683128357, 0.00089985050726681948, 0.016278158873319626, 0.028465216979384422, 0.001984589034691453, 2.9411381774480105e-07, 0.021416608244180679, 0.015018115751445293, 3.1706054670621597e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, 16407, -79216, 28848, 328595, 8713, 28900, 7484, 515154, 28444, 26123, 742797, -1073741824, 45735, 37042, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 0.00016360264271497726, 0.00021979230223223567, 3.4936492738779634e-05, 9.4733759397058748e-06, 0.00025284691946581006, 0.00011591962538659573, 0.0002594596880953759, 3.528825800458435e-06, 6.3835919718258083e-05, 0.00011162830924149603, 7.7827025961596519e-06, 1.1533876076441629e-09, 8.3986706158611923e-05, 5.889457679586485e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-83,-127,39,-66,80,-76,-89,-3,-8,29,-127,4,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,51,-105,5,127,-25, 24,-24,89,-2,-72,67,-94,78,-95,-27,3,-16,61,1,-101,-29, 
  /* [0][1][][] */ -127,127,-23,13,-44,16,-28,14,-27,1,3,-109,-49,8,-29,-14, -78,-41,-58,-15,-7,-26,8,-27,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,34,-25,34,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,67,2,-6,39,-39,52,-76,0,-1,4,40,2,-27,23, 23,-4,30,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-28,-111, 21,-7,18,0,4,14,9,23,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.0051138363778591156, 0.0089566893875598907, 0.01237939577549696, 0.0070237787440419197, 0.0026188220363110304, 0.016247790306806564, 0.0045781699009239674, 0.00087143102427944541, 0.011384977027773857, 0.0084508135914802551, 0.031704165041446686, 0.030907778069376945, 0.01079767569899559, 0.0074109598062932491, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 21896, 19009, 12124, 10580, 53674, 13165, 36180, -10385, 6644, 30037, 14341, -445, 25960, 11816, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 0.00012032556696794927, 0.00021074563846923411, 0.00029127989546395838, 0.00016526538820471615, 6.1619342886842787e-05, 0.00038230096106417477, 0.00010772164387162775, 2.0504259737208486e-05, 0.00026788181276060641, 0.00019884268112946302, 0.0007459803600795567, 0.00072724185883998871, 0.00025406296481378376, 0.00017437552742194384, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,0,-2,127,-4,-1,0,1,-126,-87,-5,0,118,-8,0, 
  /* [1][0][][] */ 0,-24,-1,85,77,15,28,1,1,-7,127,-42,0,29,-11,0, 
  /* [2][0][][] */ 0,2,2,-11,-59,3,6,3,1,3,-17,0,0,127,-10,0, 
  /* [3][0][][] */ 0,-9,-21,-127,77,24,75,15,0,59,-1,36,0,-1,11,0, 
  /* [4][0][][] */ 0,53,-19,33,-50,24,127,0,-1,-60,14,-14,0,-9,21,0, 
  /* [5][0][][] */ 0,-13,-12,-2,-23,-25,-8,15,-1,9,-5,-46,0,-6,127,0, 
  /* [6][0][][] */ 0,16,0,3,51,-22,-26,0,1,-110,116,65,0,127,62,0, 
  /* [7][0][][] */ 0,9,-15,127,7,-5,17,9,1,65,-52,78,0,-10,44,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.091794595122337341, 0.1135827898979187, 0.10274075716733932, 0.052274774760007858, 0.04484548419713974, 0.088113576173782349, 0.063922524452209473, 0.042699437588453293, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 219, -43878, -7708, -12199, -31450, -2145, -26523, -25592, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0021598727907985449, 0.0026725362986326218, 0.0024174295831471682, 0.001229994697496295, 0.001055187894962728, 0.00207326072268188, 0.0015040594153106213, 0.0010046926327049732, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 13,-127,46,-40,32,-15,-47,22, 
  /* [1][0][][] */ 73,85,-34,-114,14,-13,-80,127, 
  /* [2][0][][] */ 32,-4,-49,123,60,127,41,96, 
  /* [3][0][][] */ 75,76,-75,127,-81,-12,-15,11, 
  /* [4][0][][] */ -42,-97,73,19,4,31,-34,-127, 
  /* [5][0][][] */ 24,4,-26,42,-5,-31,44,127, 
  /* [6][0][][] */ 60,-24,-127,-88,112,20,41,-42, 
  /* [7][0][][] */ 127,13,26,-20,26,-6,81,-62, 
  /* [8][0][][] */ 5,-80,2,88,11,13,-18,-127, 
  /* [9][0][][] */ 106,-127,2,-1,-25,9,-116,94, 
  /* [10][0][][] */ -127,-44,-106,13,6,5,-102,56, 
  /* [11][0][][] */ -16,-32,-3,-102,-127,-37,48,-8, 
  /* [12][0][][] */ 14,13,-41,71,-67,-31,50,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -9,-38,-5,15,44,127,47,43, 
  /* [15][0][][] */ 39,7,22,-127,76,42,-53,72, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 11,27,127,30,-20,-9,30,24, 
  /* [18][0][][] */ 87,-127,15,23,-13,12,-112,-3, 
  /* [19][0][][] */ -127,-16,51,59,-57,-71,-108,81, 
  /* [20][0][][] */ 47,26,-47,112,-32,-127,-5,71, 
  /* [21][0][][] */ 62,26,127,13,-18,-14,73,15, 
  /* [22][0][][] */ -78,-16,-127,6,-1,15,-99,8, 
  /* [23][0][][] */ -93,115,-22,-15,10,-10,127,-69, 
  /* [24][0][][] */ 8,-52,-53,91,-6,-70,92,127, 
  /* [25][0][][] */ 19,51,32,32,127,110,-76,-51, 
  /* [26][0][][] */ -87,-35,-127,2,10,18,-106,1, 
  /* [27][0][][] */ -3,-20,-28,12,-36,127,60,43, 
  /* [28][0][][] */ 6,-23,-23,52,23,127,55,65, 
  /* [29][0][][] */ 82,31,127,4,-14,-18,83,-4, 
  /* [30][0][][] */ -83,127,-27,-30,10,-4,98,-49, 
  /* [31][0][][] */ -44,-95,-27,-6,21,-58,127,102, 
  /* [32][0][][] */ 6,2,-47,108,-26,83,89,127, 
  /* [33][0][][] */ -2,67,-19,-109,9,-8,-9,127, 
  /* [34][0][][] */ -16,79,-7,-81,32,-16,19,127, 
  /* [35][0][][] */ 127,8,-16,-33,12,22,88,-33, 
  /* [36][0][][] */ -127,-17,20,73,-36,-1,-118,66, 
  /* [37][0][][] */ 1,-31,-18,32,45,127,61,57, 
  /* [38][0][][] */ 15,30,19,98,127,-12,-16,39, 
  /* [39][0][][] */ 2,27,30,-127,27,1,-29,114, 
  /* [40][0][][] */ 95,20,127,7,-5,-10,78,0, 
  /* [41][0][][] */ -7,-26,-36,86,59,127,70,99, 
  /* [42][0][][] */ -72,-12,127,13,-48,11,-40,61, 
  /* [43][0][][] */ -11,-52,3,103,-16,0,14,-127, 
  /* [44][0][][] */ 45,-18,-88,-127,76,-43,1,-117, 
  /* [45][0][][] */ -91,127,-8,-44,13,-2,72,-62, 
  /* [46][0][][] */ -127,-18,52,29,-32,41,-86,47, 
  /* [47][0][][] */ 109,14,127,-15,11,-15,104,-9, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0010022147325798869, 0.00089688942534849048, 0.00060386507539078593, 0.00059891841374337673, 0.00051898782839998603, 0.00060924107674509287, 0.00077188294380903244, 0.0027203999925404787, 0.00088424980640411377, 0.0047352053225040436, 0.0012707235291600227, 0.003542513819411397, 0.0003561386838555336, 3.937008052901092e-09, 0.0018735872581601143, 0.00036897574318572879, 3.937008052901092e-09, 0.013404359109699726, 0.00086889590602368116, 0.0006617644103243947, 0.00050605571595951915, 0.0089610395953059196, 0.00060651393141597509, 0.00325233512558043, 0.0020543867722153664, 0.0011628477368503809, 0.0043431166559457779, 0.0047787395305931568, 0.00052265275735408068, 0.0034538500476628542, 0.0024259618949145079, 0.00032237652339972556, 0.0004189258033875376, 0.019803175702691078, 0.0010215069632977247, 0.0012296253116801381, 0.0080334395170211792, 0.00062180659733712673, 0.0045337677001953125, 0.00059197377413511276, 0.0026479568332433701, 0.00037057112785987556, 0.00096587830921635032, 0.018886970356106758, 0.00081020541256293654, 0.0010615508072078228, 0.00056009343825280666, 0.00043473814730532467, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 3728, 171, 9457, 5586, 7076, 6177, 9101, -22, -43, -291, 2181, 423, 11222, -74756704, 2538, 16203, -60347492, -94, -450, 10443, 3816, -21, -121, 339, 3313, -956, 59, 464, 3856, 1530, 2221, 13222, 3264, 297, 186, -1768, 352, 3795, -141, 10702, 1934, 10947, -236, -85, 11177, 115, 9017, 3547, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00055226997938007116, 0.00049423048039898276, 0.00033275957684963942, 0.00033003371208906174, 0.00028598800417967141, 0.00033572199754416943, 0.00042534573003649712, 0.001499075093306601, 0.00048726543900556862, 0.0026093325577676296, 0.00070023158332332969, 0.001952100545167923, 0.00019625005370471627, 2.1694863683308085e-09, 0.0010324394097551703, 0.00020332391432020813, 2.1694863683308085e-09, 0.007386466022580862, 0.00047880469355732203, 0.00036466497112996876, 0.00027886175666935742, 0.004937976598739624, 0.00033421922125853598, 0.0017921976977959275, 0.0011320689227432013, 0.00064078671857714653, 0.0023932724725455046, 0.0026333222631365061, 0.00028800754807889462, 0.0019032424315810204, 0.0013368251966312528, 0.00017764543008524925, 0.00023084886197466403, 0.010912531055510044, 0.00056290091015398502, 0.00067758443765342236, 0.0044268229976296425, 0.00034264623536728323, 0.0024983305484056473, 0.00032620687852613628, 0.0014591553481295705, 0.00020420303917489946, 0.00053224677685648203, 0.01040765643119812, 0.00044646332389675081, 0.00058496708516031504, 0.00030863922438584268, 0.00023956225777510554, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -42,-21,-6,-16,8,-39,-79,-70,-24,-50,9,64,34,-71,114,-43,-113,-85,36,-7,-2,-73,-112,-79,-34,-127,-63,-20,71,14,94,26,-127,-92,-7,55,19,49,-127,80,-76,-15,104,-109,-2,-35,-86,108, 75,13,-28,-27,57,-127,-127,-83,59,-77,-115,108,37,-82,0,61,-52,-115,59,7,12,-112,-127,-70,-4,-127,-118,-39,-55,21,-57,54,29,-127,64,86,14,74,-92,127,-127,5,126,-127,2,-22,-127,95, -31,42,6,-4,-64,-108,-58,-20,87,-8,-127,40,8,-71,-99,-11,-127,-26,28,11,-15,-77,-36,-22,-11,-31,-57,-9,-10,17,-24,10,106,-87,71,33,14,37,-4,15,-79,4,8,-77,-17,6,-56,16, 
  /* [0][1][][] */ -86,-127,-44,-46,-9,54,98,-106,-24,-109,-22,111,91,-64,26,-97,-121,-96,89,-77,40,-87,-103,-127,42,-121,-77,-39,127,-61,127,84,-43,-90,-14,85,-35,-77,-108,91,41,60,106,-107,-92,-118,84,121, 127,-82,-127,-127,127,41,92,-127,99,-127,-108,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-119,-117,127,-101,-127,-127,-121,-127,-71,127,29,-114,127,127,-69,-127,-97,89,60,127,127,-117,-113,-127,125,127, -53,31,-63,-84,-119,-22,31,-38,127,-21,-76,37,55,-70,-25,-43,-37,-28,55,-72,56,-83,-39,-23,48,-6,-46,-57,15,-89,-36,21,30,-99,118,24,-38,-61,0,-15,35,56,8,-76,-58,-37,65,35, 
  /* [0][2][][] */ -61,-108,-33,-34,1,35,-5,-33,-37,-61,-16,58,77,-127,-127,-64,-43,-19,63,75,51,-35,-13,-58,31,-57,-11,-58,74,31,78,63,107,-29,-38,-12,-95,36,-18,29,10,37,14,-53,96,-78,4,31, 88,-72,-86,-83,82,18,7,-46,47,-71,-31,56,83,-26,16,92,-24,-30,77,118,82,-54,-19,-57,91,-69,-20,-99,-52,43,-45,111,-18,-50,65,6,-127,52,-15,-2,11,30,13,-66,127,-101,-12,40, -28,30,-43,-35,-79,-18,22,-9,60,-5,-13,33,30,-43,111,-29,-93,-1,31,58,75,-28,-2,-4,42,-1,-5,-64,-14,30,-21,40,-90,-41,65,1,-21,23,26,-40,9,37,-8,-17,62,-36,-4,18, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0035528205335140228, 0.0027107829228043556, 0.0064992383122444153, 0.0050126258283853531, 0.006191769614815712, 0.0076990574598312378, 0.0055239512585103512, 0.0023224533069878817, 0.0034744946751743555, 0.0012792524648830295, 0.0037590609863400459, 0.0011843466199934483, 0.0072448849678039551, 0.23551659286022186, 0.0028883966151624918, 0.0094489669427275658, 0.1168077290058136, 0.00094943941803649068, 0.003901246003806591, 0.0083046061918139458, 0.0048228739760816097, 0.0061013912782073021, 0.0056076627224683762, 0.0014063308481127024, 0.0039846347644925117, 0.0038255241233855486, 0.0015235686441883445, 0.0018599160248413682, 0.012093415483832359, 0.0026049776934087276, 0.001868085004389286, 0.0080300280824303627, 0.0091709215193986893, 0.00036836668732576072, 0.0035804589278995991, 0.0074509712867438793, 0.00074795412365347147, 0.018238268792629242, 0.0014190023066475987, 0.0033286684192717075, 0.0030491629149764776, 0.0091497777029871941, 0.004532945342361927, 0.00037888644146732986, 0.0056029916740953922, 0.002944169333204627, 0.0081231752410531044, 0.0051885377615690231, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 71737, 62302, 62045, 41985, -206, 13484, 2626, 28212, 27553, 24525, 30668, 8829, -46212, -127, 37313, 705, -204, 27541, 2106, 1821, -15190, -5425, 43584, 34159, -20527, 29922, 36268, 19178, -2293, 14759, -8662, -50682, 11401, 99196, 30090, 1488, 53760, -496, 138438, -20705, 14238, -28256, 2894, 104334, -700, 84033, 1083, -21997, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.3595776231959462e-05, 6.3783125369809568e-05, 0.00015292325406335294, 0.00011794413876486942, 0.00014568869664799422, 0.00018115428974851966, 0.00012997532030567527, 5.4645959608023986e-05, 8.1752819824032485e-05, 3.0100058211246505e-05, 8.8448497990611941e-05, 2.7866979507962242e-05, 0.00017046788707375526, 0.005541567225009203, 6.7962275352329016e-05, 0.0002223286428488791, 0.0027484172023832798, 2.233975101262331e-05, 9.1794026957359165e-05, 0.00019540250650607049, 0.00011347939289407805, 0.00014356215251609683, 0.00013194500934332609, 3.3090138458646834e-05, 9.3756112619303167e-05, 9.0012334112543613e-05, 3.5848675906891003e-05, 4.3762731365859509e-05, 0.00028455094434320927, 6.1293590988498181e-05, 4.3954940338153392e-05, 0.00018894183449447155, 0.00021578639280050993, 8.6674517660867423e-06, 8.4246094047557563e-05, 0.00017531697812955827, 1.7598920749151148e-05, 0.00042913574725389481, 3.3388289011782035e-05, 7.8321609180420637e-05, 7.1745009336154908e-05, 0.00021528889192268252, 0.00010665754234651104, 8.9149752966477536e-06, 0.00013183509872760624, 6.9274574343580753e-05, 0.00019113354210276157, 0.00012208324915263802, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -7,5,7,-96,8,25,8,4,1,6,-2,-8,99,0,0,5,0,-5,-5,2,82,-2,-5,7,33,38,9,13,2,8,5,-127,13,4,-1,4,-21,-1,-13,30,8,-27,-3,8,7,0,7,6, 
  /* [1][0][][] */ -38,-9,1,-2,44,39,-36,88,21,6,-38,-24,15,0,23,36,0,53,16,-50,3,26,127,24,-23,-3,56,-1,26,-5,17,-5,14,-9,-11,-21,11,-54,8,4,0,-4,-97,-6,-48,10,-58,-103, 
  /* [2][0][][] */ -54,14,-3,9,36,-15,24,25,-12,52,8,-10,4,0,4,50,0,15,-127,25,0,10,4,-10,-30,1,37,9,7,27,17,7,12,-2,-17,-12,9,1,1,1,37,-4,-32,0,21,-49,25,12, 
  /* [3][0][][] */ 0,-2,1,13,-5,25,7,-9,62,11,-1,1,23,0,-26,-4,0,-1,-4,1,-5,3,1,-18,-13,-13,-15,-2,0,5,-4,-10,-55,35,-53,-8,9,4,0,-127,1,5,3,-45,0,-2,-1,6, 
  /* [4][0][][] */ -2,1,83,31,1,-28,3,-6,4,-3,0,-7,-76,0,-14,6,0,4,7,0,67,6,-1,-1,-16,37,-4,44,-10,1,0,100,3,7,0,-1,15,-14,-7,-21,-4,-127,8,5,1,-3,2,3, 
  /* [5][0][][] */ -9,46,6,-8,3,51,29,9,-25,29,8,57,26,0,-127,-5,0,10,-37,21,-12,8,-13,39,-22,-2,26,-4,-4,23,24,-18,49,29,-37,-3,4,16,-50,18,26,-13,-3,28,27,58,27,29, 
  /* [6][0][][] */ -16,-57,3,0,43,-52,-27,7,20,-28,-3,95,-3,0,-127,39,0,-15,41,-17,-4,0,31,-37,30,2,1,-9,42,-14,-10,-6,90,-36,24,-1,-5,-10,-71,-23,-16,-22,-11,-24,-23,-78,-23,-27, 
  /* [7][0][][] */ -116,-20,-8,6,127,23,64,23,14,2,35,-25,-28,0,92,101,0,9,2,69,-11,-4,-33,44,18,6,44,5,51,70,54,-10,-14,-20,-18,-23,11,30,25,33,77,0,-27,-6,62,4,63,81, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.053391452878713608, 0.023585636168718338, 0.067980468273162842, 0.055410291999578476, 0.048694495111703873, 0.051441218703985214, 0.035607863217592239, 0.026902569457888603, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -6618, -25733, 23794, 26205, 2564, 1604, 36250, 10235, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0012562695192173123, 0.00055495614651590586, 0.0015995404683053493, 0.0013037716271355748, 0.0011457528453320265, 0.0012103816261515021, 0.00083783210720866919, 0.000633001618552953, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 59,24,10,-2,127,46,-62,-26, 
  /* [1][0][][] */ -17,-10,-3,127,13,-7,3,22, 
  /* [2][0][][] */ 45,-127,-25,40,-6,-82,91,6, 
  /* [3][0][][] */ 127,-29,-2,5,-24,-31,19,6, 
  /* [4][0][][] */ 9,-53,127,-12,-11,-54,0,-102, 
  /* [5][0][][] */ 86,13,6,-2,127,29,-42,-34, 
  /* [6][0][][] */ -25,89,-20,127,61,57,-78,-45, 
  /* [7][0][][] */ -10,127,-3,5,5,-4,12,-9, 
  /* [8][0][][] */ 127,33,-10,7,-27,-31,12,-14, 
  /* [9][0][][] */ -127,18,12,24,55,21,-17,-9, 
  /* [10][0][][] */ -81,-27,-3,127,25,31,-15,3, 
  /* [11][0][][] */ -127,15,17,-81,56,1,-14,-48, 
  /* [12][0][][] */ 127,23,-12,5,-47,-10,3,-53, 
  /* [13][0][][] */ -22,105,-127,-9,31,126,-96,89, 
  /* [14][0][][] */ -63,-46,-4,127,-2,12,3,-5, 
  /* [15][0][][] */ -4,127,4,-2,-3,-15,12,-51, 
  /* [16][0][][] */ -15,-127,-13,15,8,-71,92,-34, 
  /* [17][0][][] */ 9,127,5,-15,11,82,-88,-17, 
  /* [18][0][][] */ -5,56,-127,0,0,44,-24,55, 
  /* [19][0][][] */ -65,71,14,11,-127,-4,21,0, 
  /* [20][0][][] */ -127,-15,-7,-13,54,-53,44,3, 
  /* [21][0][][] */ -61,-8,0,-2,-127,0,4,-5, 
  /* [22][0][][] */ -127,-18,-5,-7,64,-8,36,36, 
  /* [23][0][][] */ -26,-12,-2,-6,-6,64,-127,-91, 
  /* [24][0][][] */ -9,33,-127,2,9,53,-10,80, 
  /* [25][0][][] */ 81,-55,-14,127,-46,-12,14,-41, 
  /* [26][0][][] */ 7,-23,2,-6,-13,126,127,-28, 
  /* [27][0][][] */ 62,10,-4,18,127,29,59,-24, 
  /* [28][0][][] */ 0,127,-72,13,15,58,-30,121, 
  /* [29][0][][] */ -9,12,-4,-11,6,93,-127,-88, 
  /* [30][0][][] */ 1,-8,4,-127,-8,-2,-1,-13, 
  /* [31][0][][] */ -96,28,6,-8,-127,15,39,5, 
  /* [32][0][][] */ -23,23,12,-127,10,49,-91,-111, 
  /* [33][0][][] */ -56,-3,3,6,-127,30,36,7, 
  /* [34][0][][] */ -127,85,12,28,40,-26,11,5, 
  /* [35][0][][] */ -47,127,-18,-5,-4,-75,66,-27, 
  /* [36][0][][] */ 11,54,-1,-31,-4,94,-127,-27, 
  /* [37][0][][] */ 23,-82,-7,21,16,-127,92,-19, 
  /* [38][0][][] */ 13,-127,18,5,16,37,-48,92, 
  /* [39][0][][] */ 7,-127,-12,-3,-4,-13,-53,-99, 
  /* [40][0][][] */ 127,37,-10,-20,-53,82,-114,-98, 
  /* [41][0][][] */ 16,-127,15,0,-9,82,-52,125, 
  /* [42][0][][] */ 59,-5,12,-127,-57,10,-14,-41, 
  /* [43][0][][] */ -94,-43,15,-127,72,26,-9,-27, 
  /* [44][0][][] */ 4,-23,2,12,-11,90,127,-19, 
  /* [45][0][][] */ -127,-42,14,1,6,-12,23,0, 
  /* [46][0][][] */ 24,113,127,-16,11,23,16,21, 
  /* [47][0][][] */ 2,-3,12,127,8,9,8,2, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00021624972578138113, 0.0007299077115021646, 0.00062707316828891635, 0.0010441425256431103, 0.0032409725245088339, 0.0011511816410347819, 0.0027611816767603159, 0.0026852432638406754, 0.0017750721890479326, 0.001417436869814992, 0.0015699444338679314, 0.0010880132904276252, 0.0012811924098059535, 0.0013017099117860198, 0.0012894648825749755, 0.0040871505625545979, 0.001110623124986887, 0.0010478714248165488, 0.0048820213414728642, 0.00021356643992476165, 0.00071078463224694133, 0.00097722059581428766, 0.0012713259784504771, 0.002641195198521018, 0.00076793873449787498, 0.00068241462577134371, 0.00038513296749442816, 0.00086934742284938693, 0.00265279202722013, 0.0025810261722654104, 0.0013141997624188662, 0.0008557611727155745, 0.0022622132673859596, 0.00058127898955717683, 0.00082119891885668039, 0.00056457577738910913, 0.0013317654374986887, 0.000866903574205935, 0.00020331359701231122, 0.006221352145075798, 0.0016266203019768, 0.0021229321137070656, 0.00091163686010986567, 0.00097254413412883878, 0.00066372082801535726, 0.0011790328426286578, 0.0018634120933711529, 0.0024252301082015038, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 45361, 7095, 5631, 7058, 1577, 9860, -1601, -221, 684, 2202, 3286, 233, 1793, -802, 734, -2029, 3335, 9211, -260, 28962, 3839, 2263, 7144, -410, 3595, 3820, 23918, 9675, -93, -2312, 123, 2325, -2019, 8783, 2765, 7554, 6301, 3613, 26593, 1640, -868, 3035, 1374, 3584, 4147, 2170, -1385, 2479, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 9.4820432423148304e-05, 0.00032004740205593407, 0.000274956866633147, 0.00045783200766891241, 0.0014210904482752085, 0.00050476612523198128, 0.0012107134098187089, 0.0011774161830544472, 0.00077832752140238881, 0.00062151282327249646, 0.00068838376319035888, 0.00047706830082461238, 0.00056177278747782111, 0.00057076924713328481, 0.00056540011428296566, 0.0017921195831149817, 0.00048698217142373323, 0.00045946703176014125, 0.0021406516898423433, 9.3643873697146773e-05, 0.00031166238477453589, 0.00042848830344155431, 0.00055744661949574947, 0.0011581020662561059, 0.00033672311110422015, 0.00029922279645688832, 0.00016887177480384707, 0.00038118843804113567, 0.0011631870875135064, 0.0011317194439470768, 0.0005762457731179893, 0.0003752312040887773, 0.00099192745983600616, 0.0002548772026784718, 0.00036007646122016013, 0.00024755322374403477, 0.00058394786901772022, 0.00038011686410754919, 8.9148241386283189e-05, 0.0027279169298708439, 0.00071323482552543283, 0.00093085592379793525, 0.00039973136154003441, 0.00042643779306672513, 0.00029102599364705384, 0.00051697820890694857, 0.00081706244964152575, 0.0010634064674377441, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 4,-4,20,108,4,80,-1,26,17,8,10,8,-10,-9,-45,8,-1,8,-22,-114,-7,-22,127,-10,-2,8,-5,8,-4,4,15,101,20,28,38,-26,2,35,-2,4,17,-71,-8,-9,18,3,-7,-11, 127,10,14,-127,28,86,12,9,126,127,7,44,-52,-24,4,8,127,-56,-59,-53,-102,24,-111,14,17,72,-31,-85,23,21,10,-127,5,-61,127,11,-39,-46,-6,118,-80,-102,-31,2,-34,-8,-127,23, -31,-3,7,14,0,65,5,15,29,9,-15,32,-16,-3,16,2,-102,29,-3,81,-33,-12,-18,-6,-3,-58,-3,28,-15,5,4,-23,8,-23,18,-18,0,49,43,-12,49,36,-16,11,-41,4,-2,-7, 
  /* [0][1][][] */ 127,6,1,-100,13,-28,36,-17,10,9,-12,54,-7,-1,17,-32,0,-50,-60,-88,10,-73,-126,-18,6,100,-15,-127,-8,33,12,-108,17,-52,-3,127,-2,60,-43,42,-63,-127,39,-88,-43,-14,-13,-5, 27,-127,-127,115,-127,-127,-127,-127,-127,-95,127,-127,127,127,35,-127,-84,127,127,-106,127,127,111,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-40,127,-127,127,127,127,-81,127,127,127,-120,102,107, 55,5,48,-14,6,-61,45,17,-22,15,-105,-7,-2,-40,127,3,63,-65,-70,86,13,-46,10,-33,3,6,-38,68,21,40,1,3,33,-43,9,67,-4,66,70,-10,-83,8,-85,-31,29,-16,-11,4, 
  /* [0][2][][] */ -54,-6,25,-18,6,33,-37,21,9,-23,12,33,6,-6,-39,17,4,21,-15,104,6,-32,-17,-11,-2,24,0,53,-9,3,46,-30,-19,-44,-33,-37,0,31,8,-23,9,-5,42,-37,-35,18,-11,18, 68,125,74,20,16,-21,125,33,20,-2,44,27,-6,-1,-91,25,-59,-56,-35,122,-36,49,11,21,32,-62,-40,29,77,1,127,21,85,-26,6,-34,-24,-16,-14,117,-28,-13,-42,46,21,-32,7,-127, -41,-4,7,-5,6,-6,-60,7,-17,-10,-39,-39,18,-10,-10,11,33,24,-8,-127,24,-10,4,-8,-5,10,-11,-54,-14,8,6,8,-19,88,-37,-21,-4,36,26,-62,4,9,-38,7,-42,127,-4,-4, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.013296768069267273, 0.013680688105523586, 0.0078261643648147583, 0.011274997144937515, 0.0065499180927872658, 0.0045124148018658161, 0.027052221819758415, 0.006499068345874548, 0.0068857856094837189, 0.0070430557243525982, 0.0037651518359780312, 0.007713408675044775, 0.013600850477814674, 0.0071472995914518833, 0.0037761416751891375, 0.047207482159137726, 0.0091726873070001602, 0.010019559413194656, 0.0030541939195245504, 0.0070432196371257305, 0.011211506091058254, 0.0069215148687362671, 0.0089479312300682068, 0.0075940736569464207, 0.0066217663697898388, 0.0051358393393456936, 0.023570151999592781, 0.0039027279708534479, 0.0062930858694016933, 0.060889590531587601, 0.0042473860085010529, 0.0085991183295845985, 0.058925922960042953, 0.0074028079397976398, 0.0088367341086268425, 0.007470257580280304, 0.014386279508471489, 0.0054525942541658878, 0.011030317284166813, 0.00079806195572018623, 0.0070798089727759361, 0.0024639773182570934, 0.0067116077989339828, 0.0061302841641008854, 0.0062625720165669918, 0.0046447748318314552, 0.012043842114508152, 0.0054961326532065868, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -52621, 52, 9070, 442, 5616, -3381, 1656, 23218, 794, 29177, -2736, 23866, -5681, -1227, 28996, 1298, 986, 17004, 33072, 11333, 7, -227, 1374, 11149, -8227, 29813, 45789, 36563, 3797, 530, -771, 1062, 616, 16212, -6103, 13291, -12099, 19954, -22895, 139268, 19612, 22550, 10719, -2031, 15801, 2913, 1129, 261, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00031286512967199087, 0.00032189855119213462, 0.0001841450430219993, 0.00026529404567554593, 0.00015411572530865669, 0.00010617446969263256, 0.00063652289099991322, 0.00015291925228666514, 0.00016201849211938679, 0.00016571895685046911, 8.8591812527738512e-05, 0.00018149196694139391, 0.00032002001535147429, 0.00016817175492178649, 8.8850392785388976e-05, 0.0011107643367722631, 0.00021582793851848692, 0.00023575434170197695, 7.1863389166537672e-05, 0.00016572281310800463, 0.00026380014605820179, 0.00016285917081404477, 0.00021053956879768521, 0.00017868408758658916, 0.00015580626495648175, 0.00012084328045602888, 0.00055459182476624846, 9.1828893346246332e-05, 0.00014807260595262051, 0.0014326962409541011, 9.9938493804074824e-05, 0.00020233220129739493, 0.0013864922802895308, 0.00017418371862731874, 0.0002079231635434553, 0.00017577076505403966, 0.00033850071486085653, 0.00012829633487854153, 0.00025953687145374715, 1.8777927834889852e-05, 0.0001665837480686605, 5.7975936215370893e-05, 0.00015792019257787615, 0.00014424198889173567, 0.00014735464355908334, 0.00010928881965810433, 0.00028338452102616429, 0.00012932077515870333, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -38,-17,-37,5,1,-29,-4,2,-117,125,-45,110,109,1,81,-11,-24,-39,20,-9,-2,4,-27,-27,19,-95,10,67,-12,17,9,-46,4,-70,127,29,-13,-2,8,-8,109,16,48,-30,-16,17,-27,1, 
  /* [1][0][][] */ 3,35,127,4,-6,-31,2,-69,32,11,21,8,-12,9,-1,-105,3,-64,7,-2,-32,41,18,-30,-18,-10,23,2,4,-5,11,-8,1,16,39,17,-21,-31,69,-53,10,54,-6,24,-10,7,15,-5, 
  /* [2][0][][] */ 8,-53,25,-42,39,32,-3,-23,4,2,-7,17,-14,58,5,1,-41,123,-32,-38,-13,28,-45,-13,127,-1,-4,-9,-27,-2,8,-45,-11,-13,8,17,-10,0,-14,4,17,-11,-19,-2,-2,30,-33,-48, 
  /* [3][0][][] */ -4,-85,-6,10,5,-3,-6,3,0,-13,18,20,4,-12,50,5,-2,-26,4,28,-6,27,-19,1,4,49,-2,6,-2,3,127,3,16,10,6,-8,-33,-20,-9,12,-8,6,-15,30,-6,-3,1,30, 
  /* [4][0][][] */ -106,13,6,7,0,-52,14,16,63,-49,26,-21,-30,-2,-14,9,17,11,-3,21,4,-20,26,12,-6,43,8,107,6,-9,-2,-31,9,-127,-32,1,-8,2,9,12,-54,-7,-10,15,-51,3,7,11, 
  /* [5][0][][] */ -21,28,12,-3,-46,9,-5,47,34,-7,6,6,-9,-43,3,37,-11,-99,19,-4,49,-30,9,44,16,8,-76,-47,-33,-33,17,-8,4,-65,1,-70,41,4,-31,27,20,-30,1,1,127,4,-49,3, 
  /* [6][0][][] */ -34,-25,-12,-1,29,-30,2,-22,-10,-2,42,-15,-17,37,-9,-57,4,11,-6,-22,-48,31,-7,-93,-9,-9,-62,-59,29,46,-15,9,-11,-67,-33,77,-57,-49,-8,-68,-14,-5,19,50,127,-32,48,10, 
  /* [7][0][][] */ 16,41,-72,32,-23,19,5,60,-6,-3,58,-29,13,-32,-13,-2,-15,-127,32,-40,64,33,19,-57,20,-24,20,3,-12,40,-14,9,1,39,1,-6,-6,-62,-36,-57,-17,-45,41,57,-31,-12,-5,1, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.019996918737888336, 0.036558922380208969, 0.067722991108894348, 0.066553778946399689, 0.032027736306190491, 0.025405775755643845, 0.031920764595270157, 0.044200744479894638, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -46705, 17164, -14573, -10761, 15272, 1893, 33485, 41303, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00047051574802026153, 0.00086020998423919082, 0.0015934822149574757, 0.0015659712953492999, 0.00075359380571171641, 0.00059778295690193772, 0.00075107684824615717, 0.0010400175815448165, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,5,-5,72,-27,36,19,-27, 
  /* [1][0][][] */ 49,68,76,-9,0,-61,105,127, 
  /* [2][0][][] */ -61,-15,-5,4,-127,-7,11,4, 
  /* [3][0][][] */ 100,-5,-8,-127,-117,17,29,-28, 
  /* [4][0][][] */ -127,61,-12,-19,62,-12,33,12, 
  /* [5][0][][] */ -97,-39,17,-10,-127,11,7,82, 
  /* [6][0][][] */ -23,-127,32,-18,18,4,9,42, 
  /* [7][0][][] */ -70,-15,-3,98,127,-25,-36,9, 
  /* [8][0][][] */ 74,-4,4,-127,1,-12,-53,-46, 
  /* [9][0][][] */ 0,-127,-4,-11,-8,65,-53,80, 
  /* [10][0][][] */ -83,-2,-13,23,-127,81,45,-14, 
  /* [11][0][][] */ 114,31,43,24,-64,-73,-25,-127, 
  /* [12][0][][] */ 5,15,38,-6,14,-68,127,57, 
  /* [13][0][][] */ 90,-31,-2,-30,115,127,106,-43, 
  /* [14][0][][] */ 127,61,-14,14,-84,-21,-17,-33, 
  /* [15][0][][] */ -8,-127,20,1,1,0,9,34, 
  /* [16][0][][] */ -65,-16,10,-7,-127,-13,17,13, 
  /* [17][0][][] */ -26,102,-100,3,7,-127,100,-90, 
  /* [18][0][][] */ 127,-41,-42,12,-71,32,7,106, 
  /* [19][0][][] */ 127,-55,-30,-13,39,1,17,0, 
  /* [20][0][][] */ 127,29,-19,122,-5,27,24,-44, 
  /* [21][0][][] */ -7,16,-47,9,-34,81,-127,-56, 
  /* [22][0][][] */ -127,22,34,7,-19,-4,-23,-16, 
  /* [23][0][][] */ -44,-47,6,22,-127,62,84,-15, 
  /* [24][0][][] */ 127,9,6,5,-91,-12,-7,-6, 
  /* [25][0][][] */ 19,-16,-8,-22,127,51,55,-25, 
  /* [26][0][][] */ 6,-93,8,-50,5,-127,95,-55, 
  /* [27][0][][] */ -22,-127,26,-13,-2,-52,34,-6, 
  /* [28][0][][] */ -98,31,-12,7,-1,-16,127,73, 
  /* [29][0][][] */ -9,48,4,13,-4,42,-118,-127, 
  /* [30][0][][] */ 127,-25,2,4,-66,11,-40,-17, 
  /* [31][0][][] */ -35,-43,32,-33,12,-111,127,98, 
  /* [32][0][][] */ -63,31,5,-12,-127,-95,-103,48, 
  /* [33][0][][] */ -26,6,5,20,-127,-49,-40,24, 
  /* [34][0][][] */ 5,-127,52,-9,-17,82,-60,53, 
  /* [35][0][][] */ -22,-44,-127,-11,1,-70,44,-53, 
  /* [36][0][][] */ 1,127,51,11,-16,11,-23,-34, 
  /* [37][0][][] */ -127,37,44,-15,48,-27,-7,-112, 
  /* [38][0][][] */ -127,-5,-53,-5,43,27,41,112, 
  /* [39][0][][] */ 6,0,86,-6,20,-101,127,54, 
  /* [40][0][][] */ -33,-17,-7,-40,-127,113,112,-27, 
  /* [41][0][][] */ -127,78,18,-68,-97,-118,-89,64, 
  /* [42][0][][] */ -45,-127,-81,7,-16,51,-96,-64, 
  /* [43][0][][] */ -62,-1,-7,-127,108,66,74,2, 
  /* [44][0][][] */ 127,-13,10,-74,19,-21,-24,31, 
  /* [45][0][][] */ -26,-127,-4,-21,4,-66,75,-7, 
  /* [46][0][][] */ 113,2,-5,-24,127,-34,-33,5, 
  /* [47][0][][] */ 127,4,-6,108,-4,27,14,-52, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00071124901296570897, 0.0015042664017528296, 0.00058786285808309913, 0.0005337983020581305, 0.00048135436372831464, 0.00051489192992448807, 0.0007834954303689301, 0.00042376157944090664, 0.00066180469002574682, 0.0013412670232355595, 0.0020138451363891363, 0.00051969836931675673, 0.00075127877062186599, 0.0012101508909836411, 0.00028444142662920058, 0.00081585382577031851, 0.00050441938219591975, 0.00061681692022830248, 0.00040661045932210982, 0.00053394900169223547, 0.00074068078538402915, 0.00048337681801058352, 0.00078229460632428527, 0.00031908875098451972, 0.00053868052782490849, 0.00054334563901647925, 0.0032971061300486326, 0.00089648657012730837, 0.00040842400630936027, 0.00081971392501145601, 0.00057375594042241573, 0.00037864892510697246, 0.0012988203670829535, 0.00046407899935729802, 0.0013596166390925646, 0.001101931557059288, 0.001545003498904407, 0.00062536285258829594, 0.00044861738570034504, 0.00066151336068287492, 0.00033534466638229787, 0.00043024492333643138, 0.00067631626734510064, 0.00050172652117908001, 0.0036819688975811005, 0.00092097261222079396, 0.00059781776508316398, 0.0024854473304003477, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 564, 773, 1355, 442, 7330, 12630, 2387, -51, -641, -583, 794, 1012, 2683, 1063, 20245, 2457, 1660, -900, -201, 2783, -1246, 8576, 7550, 7939, 4838, 218, 3397, 3413, 6971, -346, 7291, 4970, 524, -245, 4382, 2639, -1385, 139, -556, 4568, 882, -486, -741, -105, 842, 2495, 739, 776, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00044311655801720917, 0.00093717576237395406, 0.0003662455128505826, 0.00033256266033276916, 0.00029988944879733026, 0.00032078375807031989, 0.00048812691238708794, 0.00026400847127661109, 0.00041231216164305806, 0.00083562522195279598, 0.0012546493671834469, 0.00032377822208218277, 0.00046805557212792337, 0.00075393833685666323, 0.00017721037147566676, 0.0005082865827716887, 0.00031425923225469887, 0.00038428424159064889, 0.00025332311633974314, 0.00033265654928982258, 0.00046145290252752602, 0.00030114947003312409, 0.0004873787984251976, 0.00019879607134498656, 0.00033560433075763285, 0.00033851075568236411, 0.0020541360136121511, 0.00055852171499282122, 0.00025445298524573445, 0.00051069149048998952, 0.00035745673812925816, 0.00023590275668539107, 0.0008091804338619113, 0.00028912670677527785, 0.00084705726476386189, 0.00068651640322059393, 0.00096255546668544412, 0.0003896084672305733, 0.00027949395007453859, 0.00041213064105249941, 0.00020892369502689689, 0.00026804767549037933, 0.00042135303374379873, 0.00031258157105185091, 0.0022939101327210665, 0.00057377683697268367, 0.00037244753912091255, 0.0015484631294384599, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 69,-91,95,71,54,-34,107,-65,61,-90,-78,48,53,-41,-71,-91,100,80,50,78,64,-70,-85,51,-31,-41,-63,-66,-67,62,-63,-114,-14,41,68,64,-68,55,-50,-24,47,-74,61,62,-91,13,76,-34, 82,-94,127,84,-78,-70,-59,-85,98,-103,-61,73,79,-112,-94,91,-39,95,83,127,81,-111,51,71,-51,-78,-70,-82,57,79,-29,-127,-83,79,80,84,-85,82,-82,-16,76,-95,87,89,-70,-127,92,-105, 37,-44,71,36,16,-42,-52,-40,41,-32,7,34,30,-78,-55,-4,-54,36,34,67,32,-54,29,27,-28,-46,-47,-25,31,31,90,-92,-90,44,33,36,-33,40,-39,-11,41,-43,38,44,-3,-8,35,-73, 
  /* [0][1][][] */ 91,-111,-40,95,56,-81,127,-90,90,-111,-72,84,85,-112,-12,-127,127,109,74,-39,82,108,-127,73,74,-76,-95,-101,-127,87,-70,-7,-85,69,105,96,-86,81,-80,89,86,-101,87,93,-90,109,94,-91, 127,-127,-61,127,-127,-127,-94,-127,127,-127,-127,127,127,-127,-21,97,-64,127,127,-51,127,127,70,127,127,-127,-127,-127,54,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 66,-75,-31,68,36,-62,-52,-64,57,-43,-59,58,49,-51,-16,9,-63,51,58,-31,56,62,50,65,66,-65,-64,-46,36,55,127,14,-65,70,47,49,-51,60,-61,55,59,-60,54,64,-60,-68,58,-58, 
  /* [0][2][][] */ 44,-53,-47,52,28,-52,68,-43,44,-78,-2,42,57,-72,83,-78,76,53,35,-32,27,-10,-74,28,-22,-44,-49,-50,-74,35,-41,95,-71,35,51,43,-27,39,-43,-87,47,-51,46,48,-23,20,42,-72, 72,-77,-49,83,-57,-63,-69,-70,53,-84,-67,61,75,-49,127,35,-45,59,62,-44,55,-17,43,66,-49,-64,-81,-61,33,63,-22,120,-57,63,61,57,-50,62,-68,-106,69,-68,65,63,-87,52,63,-51, 42,-42,-27,46,28,-20,-15,-34,17,-31,-52,28,33,5,68,26,-36,22,28,-34,30,-1,40,42,-25,-29,-53,-23,34,35,62,67,-3,35,17,21,-21,31,-31,-56,29,-32,28,31,-62,11,29,-4, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0026031925808638334, 0.001423527137376368, 0.0071128327399492264, 0.0026063187979161739, 0.0057355598546564579, 0.0025281279813498259, 0.0057671084068715572, 0.0040844823233783245, 0.0037766767200082541, 0.0014760460471734405, 0.0020099671091884375, 0.0040755020454525948, 0.0016978079220280051, 0.00151514180470258, 0.0066547845490276814, 0.0078782700002193451, 0.0061859907582402229, 0.0032413147855550051, 0.0048461747355759144, 0.0062709804624319077, 0.003551132045686245, 0.0079538160935044289, 0.0037459207233041525, 0.0048949103802442551, 0.0050111631862819195, 0.003425986971706152, 0.0012455638498067856, 0.0030201240442693233, 0.0049140295013785362, 0.0043898900039494038, 0.004368356429040432, 0.0073057059198617935, 0.0023016051854938269, 0.0056970207951962948, 0.0012855267850682139, 0.0026786650996655226, 0.0050997794605791569, 0.0040898784063756466, 0.0037057618610560894, 0.003677265252918005, 0.004102656152099371, 0.0035555432550609112, 0.0029390496201813221, 0.0032331147231161594, 0.0013289082562550902, 0.0073374323546886444, 0.0046850629150867462, 0.0013839807361364365, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 7522, 39052, -1342, 35220, 4039, 130051, -2427, 58688, 2115, 35525, 20244, 1336, 2191, 29461, -1094, -2477, -1008, -127, 2172, -1466, 1021, -3308, -112, -18829, -5101, 52150, 134176, 101612, 2733, 2569, -3067, 740, 23478, 1902, 32579, -6278, 48011, 486, 64065, 2783, 2242, 68565, 2122, 5916, 50408, -765, 1024, 51359, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 6.1251594161149114e-05, 3.3494758099550381e-05, 0.0001673607766861096, 6.1325146816670895e-05, 0.00013495434541255236, 5.9485366364242509e-05, 0.00013569666771218181, 9.6105468401219696e-05, 8.8862980192061514e-05, 3.4730495826806873e-05, 4.7293346142396331e-05, 9.5894167316146195e-05, 3.9948423363966867e-05, 3.5650395147968084e-05, 0.0001565831626066938, 0.00018537105643190444, 0.00014555272355210036, 7.6266231189947575e-05, 0.00011402764357626438, 0.00014755249139852822, 8.3556049503386021e-05, 0.00018714861653279513, 8.813931344775483e-05, 0.00011517436360009015, 0.00011790972348535433, 8.0611462180968374e-05, 2.9307384465937503e-05, 7.1061745984479785e-05, 0.00011562422878341749, 0.00010329153155907989, 0.00010278485569870099, 0.00017189896607305855, 5.4155418183654547e-05, 0.0001340475573670119, 3.0247689210227691e-05, 6.3027415308170021e-05, 0.00011999481648672372, 9.6232433861587197e-05, 8.7194399384316057e-05, 8.6523890786338598e-05, 9.6533090982120484e-05, 8.3659841038752347e-05, 6.9154113589320332e-05, 7.6073287345934659e-05, 3.126843148493208e-05, 0.00017264546477235854, 0.00011023677507182583, 3.2564254070166498e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ -13,-10,-8,8,27,-6,-3,101,-51,22,32,-11,23,-21,-6,11,10,-7,-4,-3,61,-13,26,127,-19,77,-20,-15,26,-21,28,-33,-26,52,14,-43,17,44,16,-18,-95,-28,12,45,21,19,-107,-57, 
  /* [1][0][][] */ -39,-18,34,18,-22,1,0,61,-68,-31,-4,-48,-16,-16,-6,-3,-30,127,-19,2,-2,-1,-36,-7,16,-36,5,29,-25,-95,-42,18,-41,-2,24,-3,2,-50,6,17,-14,-33,123,6,17,-9,2,-11, 
  /* [2][0][][] */ -20,-6,-9,-35,3,-62,0,-22,-1,6,17,24,13,12,-2,12,-7,-22,-15,-18,4,5,4,-127,-3,69,-15,1,0,-20,-4,-10,-4,52,16,-1,21,15,27,10,-39,1,-19,-5,-6,-14,20,7, 
  /* [3][0][][] */ -7,39,7,-31,-5,-3,4,-3,-24,-6,-6,36,-127,12,-9,3,4,7,-21,-4,-34,3,0,17,-7,-7,8,20,-7,15,6,18,4,4,17,23,-9,23,41,14,10,3,26,-30,11,-4,-1,24, 
  /* [4][0][][] */ 37,-37,2,11,14,27,21,-21,-31,-1,-8,-25,1,14,-4,17,24,-8,-74,7,-3,9,22,74,5,-28,3,49,10,-75,19,9,19,-34,33,-127,14,39,-1,15,-16,20,8,-22,-18,-15,14,3, 
  /* [5][0][][] */ 33,3,-33,67,0,-5,6,26,5,-9,36,12,-2,60,14,11,-13,22,36,-3,17,8,2,-34,7,-50,7,-24,-1,-3,-2,12,70,-127,3,39,-15,-13,17,12,-106,53,29,-7,-2,4,-111,-5, 
  /* [6][0][][] */ 23,-1,4,4,-18,-5,6,-12,-5,2,-4,6,-19,7,-2,6,-1,-15,127,4,3,7,14,-35,6,5,30,-14,-12,-3,-7,14,-3,-12,37,-40,7,-49,72,15,-1,-5,1,5,-2,0,0,-10, 
  /* [7][0][][] */ -48,-17,-13,30,-15,77,-4,36,-9,41,-16,127,87,-6,-7,-7,-15,-16,-24,-29,-43,-4,-25,70,-13,-39,-56,-30,-14,-21,-8,1,-4,-3,-35,5,5,-67,92,-7,24,29,-70,-58,27,-12,-10,10, 
  /* [8][0][][] */ -55,-53,7,6,-5,7,7,37,-9,-92,11,56,55,13,0,24,-7,72,-27,-8,-39,16,-5,-13,6,3,0,38,-8,127,-14,8,-1,10,-24,-127,-125,75,40,28,19,-11,125,-27,13,47,27,36, 
  /* [9][0][][] */ -24,9,-9,27,13,-38,3,1,56,-61,-3,62,-63,5,7,10,4,21,-38,-25,56,-1,-14,-13,15,11,48,-41,10,14,5,12,1,28,83,-104,-1,-127,-100,18,-32,22,76,13,11,22,-25,-36, 
  /* [10][0][][] */ -21,-12,-33,-127,53,87,5,-17,-7,36,29,5,51,-51,-33,22,37,-43,63,-26,29,-17,36,55,-62,-112,4,-37,45,33,46,-42,-32,-81,23,5,21,-49,6,-39,-34,-68,-17,12,17,14,14,-40, 
  /* [11][0][][] */ -3,57,42,64,41,-80,-87,-23,-7,63,-31,0,-11,62,9,-75,9,44,1,-28,-56,-109,8,7,15,-40,18,-24,64,-50,19,-111,28,-25,-34,-92,104,17,6,-127,-6,69,117,-80,-1,-62,15,31, 
  /* [12][0][][] */ 122,5,-9,16,3,21,0,98,27,0,-55,-22,-3,17,2,-6,-16,6,-3,-18,3,-1,-3,14,-1,19,-2,20,-1,22,-4,-6,-5,-68,-11,9,-20,-16,-27,2,-19,-77,6,-127,-48,-15,73,-7, 
  /* [13][0][][] */ 8,4,-2,5,4,-8,0,1,0,3,2,24,-6,4,1,2,8,2,12,1,11,-14,9,-5,3,3,14,127,13,-4,5,-2,6,0,-40,22,13,-5,8,-13,-15,-3,1,3,-2,-4,-8,-13, 
  /* [14][0][][] */ 60,-28,43,-67,49,21,45,-95,-58,-37,-8,105,-58,-5,67,7,41,30,-59,51,1,21,64,-14,5,52,-37,-100,24,-34,54,43,-16,67,-127,-47,-40,41,77,3,-31,-1,42,0,9,1,3,-24, 
  /* [15][0][][] */ -2,-63,-95,-27,48,22,73,-52,-6,14,-13,-46,89,18,-111,64,61,52,88,-74,-101,-13,71,-12,-98,42,21,53,60,45,46,-48,21,66,106,127,-17,-110,-10,-33,103,56,108,-52,-15,-25,-9,62, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.031722117215394974, 0.03384452685713768, 0.052467599511146545, 0.042871829122304916, 0.037910778075456619, 0.039176348596811295, 0.03579217940568924, 0.02316131629049778, 0.025669258087873459, 0.023372640833258629, 0.035163968801498413, 0.023696061223745346, 0.038991700857877731, 0.047924675047397614, 0.01954597607254982, 0.026480479165911674, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -33685, 3777, 2034, -7315, -890, -8002, -13068, -33544, 3052, 24133, 35718, -7970, -4796, -23317, 44796, -43907, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00074640277307480574, 0.00079634180292487144, 0.0012345317518338561, 0.0010087488917633891, 0.00089201831724494696, 0.00092179648345336318, 0.00084216892719268799, 0.00054497213568538427, 0.00060398253845050931, 0.00054994452511891723, 0.00082738749915733933, 0.00055755442008376122, 0.00091745180543512106, 0.0011276394361630082, 0.00045990533544681966, 0.00062307011103257537, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 36,-27,122,127,52,-18,62,-41,101,-8,-58,-94,23,78,-63,-100, 
  /* [1][0][][] */ -6,127,-20,10,70,4,47,18,50,112,-45,122,-24,-47,93,-109, 
  /* [2][0][][] */ 29,-45,-11,-23,-29,17,-97,98,-79,-113,8,71,-22,-108,90,-127, 
  /* [3][0][][] */ 119,127,-12,23,-118,-30,-66,-5,-9,-10,88,-54,-48,83,-57,-11, 
  /* [4][0][][] */ 16,1,-8,-10,-12,27,-18,58,-76,-50,1,-12,-2,-127,38,13, 
  /* [5][0][][] */ 117,-49,-16,-50,-16,-127,-34,29,0,15,-86,-5,37,-11,26,57, 
  /* [6][0][][] */ -127,-73,-4,103,-71,22,-22,32,-114,-62,-72,-45,31,60,-14,103, 
  /* [7][0][][] */ -50,-1,-111,50,36,-127,-55,41,18,-51,25,-35,-10,35,-27,21, 
  /* [8][0][][] */ 40,-50,-8,-2,-4,31,-55,-60,-22,19,-80,7,-127,-4,-6,24, 
  /* [9][0][][] */ 11,-81,63,122,11,64,-16,-118,127,-104,29,-52,-41,74,-81,35, 
  /* [10][0][][] */ -109,-61,14,-43,73,30,37,71,102,-53,-71,-17,67,-73,-127,100, 
  /* [11][0][][] */ 42,-26,-127,27,47,23,-38,41,-4,-30,-13,-28,-3,33,-41,6, 
  /* [12][0][][] */ 104,-53,-3,-6,-35,-55,-54,-44,42,3,-127,-34,-47,-31,28,74, 
  /* [13][0][][] */ 74,-72,75,-51,114,-13,-100,-127,97,-71,32,57,44,-52,53,16, 
  /* [14][0][][] */ -57,28,-84,-34,93,-127,85,-78,56,53,-7,-109,23,118,-3,-1, 
  /* [15][0][][] */ 21,-2,56,38,70,-69,-35,-28,46,-55,-60,-20,-127,-85,7,36, 
  /* [16][0][][] */ -127,30,-34,2,-25,73,49,84,-14,-4,126,-24,6,-3,6,12, 
  /* [17][0][][] */ -15,2,-39,-28,-35,10,21,66,-17,127,-22,6,-13,70,66,-9, 
  /* [18][0][][] */ 24,116,-51,-6,40,-11,2,-57,20,80,-41,127,-4,-46,45,-121, 
  /* [19][0][][] */ 10,-10,41,28,-3,53,1,1,14,1,-57,-15,-127,1,-15,43, 
  /* [20][0][][] */ 101,-80,-23,-107,-21,0,13,-97,-85,-8,-127,-38,43,19,50,4, 
  /* [21][0][][] */ 47,-28,127,75,-30,54,31,-30,-6,45,-41,-30,-6,61,44,11, 
  /* [22][0][][] */ 39,34,-1,-22,-45,-7,12,127,18,-11,27,0,-12,19,61,57, 
  /* [23][0][][] */ -10,4,-100,-2,15,-127,-5,64,-12,-49,-4,16,-56,24,-37,67, 
  /* [24][0][][] */ 60,-85,12,-70,63,4,-42,-11,41,17,70,79,-40,102,127,53, 
  /* [25][0][][] */ -127,-120,-86,8,-10,4,11,-19,-73,-18,-88,15,43,60,17,86, 
  /* [26][0][][] */ 3,-35,69,31,-24,12,-65,34,-67,-70,-41,13,13,-127,57,-38, 
  /* [27][0][][] */ -111,63,-82,22,23,-34,-1,4,13,-33,127,7,-38,-33,0,-14, 
  /* [28][0][][] */ -9,6,18,24,-4,-1,3,95,25,-1,-17,-23,-127,-20,11,47, 
  /* [29][0][][] */ 4,55,25,-46,65,-19,7,-16,-127,23,-17,15,3,29,-73,9, 
  /* [30][0][][] */ -4,-8,-127,-42,22,-62,-12,33,-22,-22,-14,-27,-53,-30,25,15, 
  /* [31][0][][] */ 84,-39,-127,-8,46,0,-56,41,-32,-4,-62,-66,-16,-26,-100,63, 
  /* [32][0][][] */ -122,8,1,59,-16,127,15,18,40,3,112,-21,-5,25,14,-33, 
  /* [33][0][][] */ -9,-46,127,-28,-57,27,-5,-67,-28,18,2,7,-54,-7,61,14, 
  /* [34][0][][] */ -39,-109,-32,-127,73,46,-30,-42,-72,-110,-22,-114,17,33,52,8, 
  /* [35][0][][] */ 7,-49,45,56,47,-21,23,-27,-116,36,-6,14,-20,127,-40,-40, 
  /* [36][0][][] */ -99,79,-27,-1,-34,50,75,112,3,44,127,-30,29,26,27,-2, 
  /* [37][0][][] */ -29,12,127,-26,-72,-43,27,-33,19,3,-7,-10,15,-37,44,-1, 
  /* [38][0][][] */ 24,-17,-19,18,62,-39,-70,24,-17,-29,99,2,127,19,-10,7, 
  /* [39][0][][] */ -11,-51,-1,-67,-58,-101,13,127,-37,-31,32,-83,6,35,87,55, 
  /* [40][0][][] */ 50,-6,-7,-4,-37,92,-2,-4,4,9,-5,-11,127,15,-32,-9, 
  /* [41][0][][] */ -5,3,-21,-127,17,2,-25,-58,-16,-45,17,-33,-1,-15,-27,34, 
  /* [42][0][][] */ 36,53,22,106,-110,-13,-78,24,-68,-56,67,-82,-39,127,-47,5, 
  /* [43][0][][] */ 24,127,-24,116,29,4,58,-59,-33,77,-1,26,9,-55,61,25, 
  /* [44][0][][] */ -21,-16,-127,44,33,105,-48,77,3,-23,49,-20,13,-9,-80,-14, 
  /* [45][0][][] */ 17,17,-1,-127,-25,-8,23,18,-24,-8,-14,6,6,-66,39,-30, 
  /* [46][0][][] */ 0,32,75,-18,34,14,-32,52,0,-74,-14,23,-8,127,41,-41, 
  /* [47][0][][] */ 14,-23,19,-50,-27,9,-78,46,-10,-33,17,34,-1,-127,55,9, 
  /* [48][0][][] */ 4,-9,17,-127,-10,-21,-3,19,29,-44,15,-12,16,69,-2,57, 
  /* [49][0][][] */ 26,-24,11,127,93,23,-16,33,-61,10,32,52,-23,45,123,-26, 
  /* [50][0][][] */ -21,-13,54,-20,3,127,-22,-88,18,-13,110,41,60,-25,-6,-62, 
  /* [51][0][][] */ 20,66,20,15,1,17,-35,23,47,4,-1,127,34,36,21,-58, 
  /* [52][0][][] */ -9,61,127,3,11,-46,8,-45,-27,6,-5,25,10,83,-108,6, 
  /* [53][0][][] */ -15,-29,-50,-127,-60,8,4,-30,-14,44,28,-28,8,-41,77,-1, 
  /* [54][0][][] */ -8,4,-33,-76,52,-17,-36,-9,43,-54,7,8,-38,127,17,33, 
  /* [55][0][][] */ -4,-26,-2,14,10,-1,-19,-127,16,-54,-31,-12,-24,-46,-30,-32, 
  /* [56][0][][] */ 45,58,34,69,10,-22,29,127,26,-20,4,-36,76,-22,-59,40, 
  /* [57][0][][] */ 57,-1,127,-12,-88,-5,14,-5,-14,-6,-61,8,48,-21,44,-8, 
  /* [58][0][][] */ 127,81,8,125,-120,-15,-11,38,-19,1,86,14,-65,-48,-13,-72, 
  /* [59][0][][] */ 127,-31,-17,-18,-14,-26,-2,17,-25,16,-94,-31,-9,-21,7,28, 
  /* [60][0][][] */ -127,39,6,26,24,-5,26,13,4,10,53,-8,-64,-8,44,-35, 
  /* [61][0][][] */ -62,97,45,30,28,-14,-61,-57,127,-88,99,-37,42,-43,-101,-83, 
  /* [62][0][][] */ -49,-38,-112,62,42,119,30,127,19,-42,50,-28,-39,28,-98,2, 
  /* [63][0][][] */ -60,4,127,-38,-53,-48,42,2,23,10,4,1,11,-28,75,18, 
  /* [64][0][][] */ 60,77,-33,29,32,-39,86,-100,-25,90,-20,-30,19,-127,-7,47, 
  /* [65][0][][] */ 7,10,18,-30,68,14,-11,-127,-21,-60,-34,-69,-9,-28,49,27, 
  /* [66][0][][] */ -127,-6,-7,11,-36,14,3,-57,-72,-43,-111,47,59,38,63,96, 
  /* [67][0][][] */ 2,-62,-9,127,-8,0,-26,54,71,38,13,-56,-25,-6,-106,-14, 
  /* [68][0][][] */ -2,5,-23,127,-33,2,-1,-29,-85,29,32,-18,-44,-86,-34,-36, 
  /* [69][0][][] */ 45,49,0,107,37,14,39,-127,29,85,37,10,-18,-13,30,8, 
  /* [70][0][][] */ -7,-36,-5,-37,67,-12,44,49,120,20,38,-67,2,125,28,127, 
  /* [71][0][][] */ 20,63,9,84,59,-127,-57,96,22,-118,8,25,2,-61,-71,30, 
  /* [72][0][][] */ -127,-83,-29,51,20,36,-32,11,-61,-38,-116,29,49,25,-16,111, 
  /* [73][0][][] */ -19,-16,-7,120,7,-6,29,-20,61,24,-7,36,11,127,-101,-47, 
  /* [74][0][][] */ 51,-5,-14,-23,-35,-42,48,8,-55,-22,-109,62,-127,-18,18,22, 
  /* [75][0][][] */ -22,-32,-5,127,-19,22,1,-27,-55,21,5,-36,0,-35,-18,-45, 
  /* [76][0][][] */ -3,-6,-2,54,34,4,-24,-123,4,-127,-1,26,-37,-33,37,-45, 
  /* [77][0][][] */ 127,-41,17,57,-16,-40,-38,-26,38,-24,-18,67,58,5,-80,31, 
  /* [78][0][][] */ -48,-18,72,2,35,-2,-71,30,68,-16,-41,-24,-4,127,25,-59, 
  /* [79][0][][] */ 6,14,52,10,26,46,-55,-61,7,-65,71,-26,127,-14,-20,-32, 
  /* [80][0][][] */ -113,-71,-37,127,39,32,45,-26,-52,39,-63,45,51,-74,-18,27, 
  /* [81][0][][] */ 58,-53,-83,35,113,82,-28,-5,-18,-127,3,-58,5,11,-94,41, 
  /* [82][0][][] */ 114,127,18,51,-114,-3,-63,-1,-33,-6,94,-23,-48,106,21,-67, 
  /* [83][0][][] */ 127,52,19,-22,-2,-15,-9,32,33,19,69,-24,-48,-30,-25,-65, 
  /* [84][0][][] */ -12,-105,-62,-37,70,10,-20,-127,-19,-96,40,27,-3,14,12,-4, 
  /* [85][0][][] */ -23,36,-41,-46,-27,-4,96,124,-21,127,-15,-55,35,71,75,-29, 
  /* [86][0][][] */ 119,-32,-28,-15,-9,-36,7,4,-6,20,-127,-11,47,14,1,66, 
  /* [87][0][][] */ -8,18,4,-22,23,48,-40,75,10,-37,40,43,17,-127,8,-11, 
  /* [88][0][][] */ 22,-37,-123,3,103,-6,-89,-127,64,-3,-89,11,-46,52,31,-72, 
  /* [89][0][][] */ 21,-41,32,-127,48,7,-28,99,102,-66,63,-6,-7,64,31,54, 
  /* [90][0][][] */ 10,17,-27,90,68,19,111,-102,86,127,-53,48,1,26,-44,-48, 
  /* [91][0][][] */ 24,-38,-32,-5,9,-127,-9,-30,-25,-5,-24,8,33,-19,4,16, 
  /* [92][0][][] */ 25,12,127,71,48,8,-2,26,-39,23,-50,44,9,96,-23,-16, 
  /* [93][0][][] */ 97,-42,-34,-7,-32,-46,25,22,-8,53,-127,-27,-3,11,1,48, 
  /* [94][0][][] */ 8,-19,50,87,107,-24,-5,57,0,-13,-3,72,-8,127,-38,-73, 
  /* [95][0][][] */ -105,81,55,36,3,57,31,22,-4,17,127,-19,-49,14,-18,-28, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00045114333624951541, 0.00064914283575490117, 0.00053147872677072883, 0.0028948225080966949, 0.0011952704517170787, 0.00051319674821570516, 0.00046339764958247542, 0.0014665792696177959, 0.0012307337019592524, 0.00030433363281190395, 0.00086643698159605265, 0.0013976533664390445, 0.0014038854278624058, 0.00039207900408655405, 0.00083921244367957115, 0.0010151710594072938, 0.00093735725386068225, 0.0010224520228803158, 0.00075140548869967461, 0.0024883083533495665, 0.0014464596752077341, 0.00050070363795384765, 0.0011963977012783289, 0.00057783967349678278, 0.00051153410458937287, 0.0010938427876681089, 0.0011679178569465876, 0.00056910066632553935, 0.0027203310746699572, 0.0011669977102428675, 0.0005780752981081605, 0.00061537919100373983, 0.00038904408575035632, 0.0016129142604768276, 0.00057238579029217362, 0.0015967113431543112, 0.00042242751806043088, 0.0015466002514585853, 0.0015382571145892143, 0.00058608787367120385, 0.0017682298785075545, 0.00052276434144005179, 0.00043195593752898276, 0.00048894976498559117, 0.0010615111095830798, 0.0010993934702128172, 0.00048532281653024256, 0.0008916878723539412, 0.00098825350869446993, 0.00096581096295267344, 0.0015509757213294506, 0.0025545104872435331, 0.00057306257076561451, 0.00065665959846228361, 0.00081013754243031144, 0.00063245621277019382, 0.0011557447724044323, 0.00083360675489529967, 0.0009594451985321939, 0.0016046895179897547, 0.00048493850044906139, 0.00086831889348104596, 0.0011919474927708507, 0.0016127754934132099, 0.00043728790478780866, 0.00085763214156031609, 0.00092222669627517462, 0.0012534563429653645, 0.00039524846943095326, 0.00057663460029289126, 0.00074721698183566332, 0.0009962108451873064, 0.00069576851092278957, 0.0010611772304400802, 0.00079293356975540519, 0.0012076757848262787, 0.00039579733856953681, 0.0010021054185926914, 0.00030680833151564002, 0.001641711569391191, 0.00053140101954340935, 0.0014995783567428589, 0.00066539965337142348, 0.0013129436410963535, 0.00062586797866970301, 0.00096738804131746292, 0.00075854058377444744, 0.0015072174137458205, 0.00047495460603386164, 0.0009761674446053803, 0.00043403668678365648, 0.00143819535151124, 0.00041718376451171935, 0.00049401534488424659, 0.00099363073240965605, 0.00071809533983469009, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 18500, 1766, 7882, -575, 4190, 5882, 21101, 7473, -1222, 19010, 5054, 1847, 6093, 38270, -615, -2115, 7390, 6999, 1976, -134, -474, 15526, 3808, 4146, 10761, 6034, 3660, 5224, 102, -51, 7523, 9450, 15922, 2090, 9304, -550, 16681, 5212, 911, 5150, 817, 11266, 15656, 4697, 3295, 9139, 18470, 5104, 5058, 2859, 233, -827, 14431, 7712, 9166, 8920, -152, 6762, 2660, 3183, 11109, 4923, 2604, 5410, 7346, 3950, 6744, -880, 21453, 6347, 8161, -1538, -1528, 3798, 1718, 3238, 18603, 13972, 16757, -2337, 6391, -4362, -1558, 712, 8031, 5269, 6752, 2690, 11091, 5169, 10439, 3607, 15902, 17617, -9220, 14538, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00014475440548267215, 0.00020828476408496499, 0.00017053091141860932, 0.00092883629258722067, 0.00038351592957042158, 0.00016466493252664804, 0.00014868633297737688, 0.00047056842595338821, 0.00039489471237175167, 9.7648859082255512e-05, 0.00027800601674243808, 0.00044845277443528175, 0.0004504523822106421, 0.00012580295151565224, 0.00026927073486149311, 0.00032572902273386717, 0.0003007616032846272, 0.00032806521630845964, 0.00024109688820317388, 0.00079840165562927723, 0.00046411281800828874, 0.00016065637464635074, 0.00038387763197533786, 0.00018540634482633322, 0.00016413145931437612, 0.00035097173531539738, 0.0003747395530808717, 0.00018260233628097922, 0.00087284873006865382, 0.00037444432382471859, 0.00018548194202594459, 0.00019745131430681795, 0.00012482916645240039, 0.0005175216356292367, 0.00018365640426054597, 0.00051232276018708944, 0.0001355406129732728, 0.00049624405801296234, 0.00049356702947989106, 0.00018805287254508585, 0.00056735641555860639, 0.00016773480456322432, 0.00013859791215509176, 0.00015688501298427582, 0.00034059776226058602, 0.0003527527442201972, 0.00015572126721963286, 0.00028610805748030543, 0.00031709222821518779, 0.00030989127117209136, 0.00049764796858653426, 0.00081964337732642889, 0.00018387356249149889, 0.00021069659851491451, 0.00025994173483923078, 0.00020293067791499197, 0.00037083367351442575, 0.00026747208903543651, 0.00030784876435063779, 0.00051488261669874191, 0.00015559795428998768, 0.00027860986301675439, 0.00038244973984546959, 0.0005174771067686379, 0.00014030873717274517, 0.00027518090792000294, 0.00029590679332613945, 0.00040218554204329848, 0.00012681991211138666, 0.00018501968588680029, 0.00023975294607225806, 0.00031964541994966567, 0.00022324513702187687, 0.00034049063106067479, 0.00025442164042033255, 0.00038749631494283676, 0.00012699601938948035, 0.00032153676147572696, 9.8442898888606578e-05, 0.00052676157793030143, 0.00017050598398782313, 0.00048115654499270022, 0.00021350094175431877, 0.00042127270717173815, 0.00020081676484551281, 0.00031039729947224259, 0.00024338625371456146, 0.00048360761138610542, 0.00015239451022353023, 0.00031321428832598031, 0.00013926553947385401, 0.00046146110980771482, 0.00013385809143073857, 0.0001585103600518778, 0.00031881756149232388, 0.00023040894302539527, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -18,7,-21,106,-18,19,-64,-53,15,-5,101,-10,5,-9,-3,53,6,16,-32,2,72,0,32,-33,3,17,46,47,22,15,23,48,-2,29,12,-14,5,48,-62,-27,21,9,25,16,-84,-57,26,-5,-10,-19,-8,-6,50,5,-8,2,-4,-33,26,-31,25,-2,127,28,-13,-11,15,-50,66,34,9,-9,79,-33,67,4,15,-125,33,62,0,13,127,-11,39,29,-25,-19,35,-5,-16,82,-1,20,-2,14, -50,15,-8,9,53,-9,-12,-127,37,13,-127,-5,-15,-12,5,90,19,-29,-10,-16,76,-97,127,26,-60,-33,-105,-17,28,38,-49,16,118,16,-13,-1,-23,127,-68,-127,8,-19,-29,14,48,-127,127,-44,-75,47,49,6,39,-63,34,55,35,40,-105,89,127,33,7,-19,40,-38,-89,4,37,-30,-16,45,-50,-53,103,-3,-30,-58,-30,63,-68,60,-14,10,-11,46,55,-38,-25,53,-14,74,-127,-30,22,-127, -1,-2,-23,-76,8,16,36,21,-3,-1,6,62,1,-13,-10,6,-12,18,-21,13,3,22,24,-31,2,-33,10,11,-6,7,45,-78,45,17,9,-22,13,7,-29,-22,9,3,-15,5,22,-30,22,0,7,-5,5,-3,5,6,-3,9,-9,43,8,-2,9,-17,5,-16,-28,-17,29,-46,-106,-6,48,-15,-127,-25,-12,16,11,-9,8,13,-13,23,-35,-3,-41,20,28,35,-24,-17,24,-11,19,6,-2,-44, 
  /* [0][1][][] */ -40,58,-20,40,-86,-15,-10,-44,26,95,-44,-22,-31,-25,-6,64,127,-26,-89,-15,62,-127,-27,17,-33,-49,-127,-5,39,38,-50,25,-125,-73,-54,4,65,-4,-45,45,-18,86,1,-1,35,-54,-13,-32,127,44,-3,20,44,10,-37,-17,30,9,-126,127,-39,-87,24,127,-60,-36,-78,123,-35,127,-11,52,-34,-58,34,7,-35,-73,127,46,127,37,6,1,127,27,-100,44,-39,-35,-103,42,96,103,27,-59, 127,127,127,127,-46,-127,127,23,127,-127,18,-127,-108,127,127,127,-13,-127,-58,-127,127,22,-66,127,127,127,-54,-127,127,127,-127,127,-13,-127,-123,127,-127,-43,98,107,-127,-127,127,127,127,-122,-106,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-44,40,-110,-25,-67,-68,127,127,-69,127,127,-106,-127,127,-41,127,-127,-127,-127,127,-76,127,-47,127,80,127,-38,-127,-24,-103,-127,-126,-23,-127,-23,-127,-127,115, -25,68,-38,3,127,69,-21,49,6,24,-14,-4,-26,-31,-13,-7,-102,-23,-127,37,30,77,-11,-116,-33,-42,125,76,11,35,72,10,120,-44,127,-2,56,5,-91,16,38,23,-22,0,-22,-53,-13,-43,80,19,-12,39,-5,-3,-75,-13,24,18,127,-92,0,127,3,-36,-109,-27,-74,101,16,-16,116,25,-18,-58,10,47,-26,-10,-42,-1,-49,10,46,23,-91,34,127,-45,33,-23,127,-8,-112,33,32,18, 
  /* [0][2][][] */ -4,-41,-22,-61,-5,14,40,29,0,12,-16,54,23,-34,-8,10,41,2,13,20,-10,29,-14,-27,2,-25,11,2,-6,-3,49,-75,-35,71,-29,-24,31,-34,-64,16,10,8,-34,18,13,-79,-12,-2,-8,8,17,-9,7,1,-23,6,-2,43,-51,34,-8,-12,9,19,-3,-10,15,-52,-54,12,-15,-10,-117,-37,-1,16,14,-14,54,17,22,20,-38,16,11,23,-20,7,3,24,22,-6,24,42,-7,-29, -29,-10,-28,26,-46,76,-24,64,6,-5,56,-10,127,-6,-20,-18,0,-39,-54,21,-23,78,-42,-111,-47,-48,104,67,17,45,53,-1,-127,66,-13,-21,-28,-25,-127,-6,43,-13,-13,37,-27,-45,-16,-48,-59,27,70,23,-12,-80,29,52,17,26,71,-55,23,-58,-5,1,24,-26,-127,-54,-10,-25,-63,23,38,-50,-30,-8,-44,24,-59,6,48,40,15,9,5,61,-93,127,17,127,-30,-18,113,-20,45,80, -10,-33,-26,29,14,64,-43,12,4,-5,0,15,13,-50,-10,-16,-44,-7,18,18,-30,5,-21,4,-4,19,2,49,1,-7,35,31,19,48,20,-21,-5,-25,-31,9,12,-11,23,8,-74,-31,-12,3,-1,-11,-1,-5,-8,9,-17,-4,-1,-48,10,-28,-24,48,10,-29,-8,-2,32,-51,47,7,57,-20,31,-57,-18,21,12,8,-6,20,-32,32,90,-13,-19,52,40,-8,111,12,3,-19,9,-23,-7,-48, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0080167828127741814, 0.0042040105909109116, 0.0098628625273704529, 0.0016127718845382333, 0.0057846531271934509, 0.0072242752648890018, 0.013457569293677807, 0.0034510367549955845, 0.0058783655986189842, 0.016205674037337303, 0.0067061292938888073, 0.015328020788729191, 0.0045789433643221855, 0.018112123012542725, 0.0072994707152247429, 0.0041719628497958183, 0.0042750085704028606, 0.012483883649110794, 0.0028749101329594851, 0.0086114527657628059, 0.0016804850893095136, 0.0078177489340305328, 0.0059151328168809414, 0.015449228696525097, 0.011566157452762127, 0.0099026430398225784, 0.0050517572090029716, 0.0076062050648033619, 0.0045970571227371693, 0.0046711680479347706, 0.0059950975701212883, 0.0075253220275044441, 0.0054405783303081989, 0.0047140335664153099, 0.0081142662093043327, 0.0082995342090725899, 0.013143591582775116, 0.0052150827832520008, 0.002138486597687006, 0.0073763919062912464, 0.011178411543369293, 0.013097870163619518, 0.015664665028452873, 0.0059932917356491089, 0.008205329068005085, 0.0020530514884740114, 0.0087535176426172256, 0.0087072048336267471, 0.003936124499887228, 0.0071220486424863338, 0.0079515678808093071, 0.0071375756524503231, 0.0095519507303833961, 0.013165521435439587, 0.0099846385419368744, 0.019134495407342911, 0.014697051607072353, 0.011034702882170677, 0.0048487549647688866, 0.0033666114322841167, 0.01359894685447216, 0.0055731399916112423, 0.012473514303565025, 0.0054018707014620304, 0.0084079597145318985, 0.0075324415229260921, 0.0039926194585859776, 0.0037004363257437944, 0.014786232262849808, 0.0097629595547914505, 0.0087532000616192818, 0.0045670592226088047, 0.0050688828341662884, 0.006017172709107399, 0.0062172310426831245, 0.011118869297206402, 0.021902091801166534, 0.0021734389010816813, 0.010605443269014359, 0.0098390644416213036, 0.0066143409349024296, 0.0094426954165101051, 0.0060089579783380032, 0.0050803595222532749, 0.0048091979697346687, 0.0041812178678810596, 0.0057014641351997852, 0.0081149963662028313, 0.008597053587436676, 0.0054605160839855671, 0.0076985857449471951, 0.0049978136084973812, 0.0058235530741512775, 0.017431849613785744, 1.0273979902267456, 0.0034063204657286406, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 10289, -10226, 3773, 56584, -1524, -4185, -10748, 3035, -2937, 763, 2125, -1364, 981, -5302, 6127, -7699, -1357, 16568, 23962, 2768, 3137, -1432, -37, -75, 13084, -572, -1786, -3502, -5273, -7120, 5502, -8896, 731, -2789, -1155, 11715, 910, -3681, 20255, 885, -113, 1915, -10176, -7306, -7585, 66425, -402, 17101, 27835, -13511, -359, 7568, 7677, -609, -6764, 2389, -11962, 2693, 3574, -7018, -370, -1453, -12949, -708, 1270, 15829, 29144, 19846, -13033, -4, -10846, -1004, 48356, 11772, 443, 1162, 18089, 33581, -493, -7926, -1158, -9037, 220, -2606, 922, 963, 1603, -261, 1693, -2276, 375, -1676, 357, -814, 51, 47791, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00018863019067794085, 9.8917895229533315e-05, 0.0002320673520443961, 3.7947575037833303e-05, 0.00013610949099529535, 0.00016998294449876994, 0.00031664868583902717, 8.1200865679420531e-05, 0.00013831448450218886, 0.00038130997563712299, 0.00015779127716086805, 0.00036065932363271713, 0.00010773984831757843, 0.00042616762220859528, 0.00017175225366372615, 9.8163836810272187e-05, 0.0001005884405458346, 0.00029373844154179096, 6.7644949012901634e-05, 0.00020262242469470948, 3.9540827856399119e-05, 0.00018394703511148691, 0.00013917959586251527, 0.00036351126618683338, 0.00027214488363824785, 0.00023300337488763034, 0.00011886487482115626, 0.0001789695379557088, 0.00010816605208674446, 0.00010990983719239011, 0.00014106111484579742, 0.00017706640937831253, 0.00012801360571756959, 0.00011091843771282583, 0.00019092392176389694, 0.00019528316624928266, 0.00030926099861972034, 0.00012270783190615475, 5.0317332352278754e-05, 0.00017356216267216951, 0.00026302144397050142, 0.00030818517552688718, 0.00036858036764897406, 0.00014101863780524582, 0.00019306657486595213, 4.8307094402844086e-05, 0.0002059651305899024, 0.00020487541041802615, 9.2614696768578142e-05, 0.0001675776147749275, 0.00018709572032094002, 0.00016794295515865088, 0.00022475178411696106, 0.00030977698042988777, 0.00023493268236052245, 0.00045022342237643898, 0.00034581299405544996, 0.00025964007363654673, 0.00011408835416659713, 7.9214391007553786e-05, 0.00031997522455640137, 0.00013113270688336343, 0.00029349446413107216, 0.00012710284499917179, 0.00019783434981945902, 0.00017723391647450626, 9.3943992396816611e-05, 8.706909284228459e-05, 0.00034791135112755001, 0.00022971669386606663, 0.00020595765090547502, 0.00010746021871455014, 0.00011926783190574497, 0.00014158053090795875, 0.00014628779899794608, 0.00026162047288380563, 0.00051534333033487201, 5.1139741117367521e-05, 0.00024953985121101141, 0.00023150740889832377, 0.00015563155466224998, 0.00022218107187654823, 0.00014138725236989558, 0.00011953787179663777, 0.00011315759911667556, 9.8381598945707083e-05, 0.00013415209832601249, 0.00019094109302386642, 0.00020228361245244741, 0.00012848273036070168, 0.00018114320118911564, 0.00011759561311919242, 0.00013702477735932916, 0.00041016118484549224, 0.024174069985747337, 8.0148718552663922e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ -4,6,-3,21,36,73,-30,-15,48,8,23,9,-6,-3,31,58,0,-4,4,-9,106,-62,-12,-31,-42,-36,-47,-83,-19,-4,46,42,127,-22,-3,-7,7,-19,-35,5,-27,-4,16,-46,12,-33,-13,12,-18,1,3,-7,-29,-17,0,-7,29,25,-11,-26,-61,22,1,-2,7,8,60,0,3,15,6,-26,-68,1,-6,3,-9,-90,3,-28,30,1,-59,-35,31,-19,0,36,-9,14,33,-47,23,27,-16,123, 
  /* [1][0][][] */ 44,-69,35,63,9,-42,-18,-35,-18,-52,-22,21,4,-53,-38,-32,-83,-17,12,10,-23,-76,-50,42,127,-44,-31,25,-19,100,-19,57,3,38,-4,-5,-18,-38,21,7,-4,-50,52,-29,-51,-5,30,16,52,8,27,-27,53,-34,24,-25,-10,11,-19,-74,49,-42,1,-45,-4,-60,18,19,32,58,-35,-1,-68,25,-11,59,-3,54,15,-23,22,-18,-63,21,-74,41,10,36,-42,7,15,17,-11,-35,21,-10, 
  /* [2][0][][] */ 17,18,11,-31,-7,4,5,24,57,-16,16,57,6,15,63,-5,1,-14,10,0,-17,-78,22,-43,-9,1,-17,20,-8,6,99,-57,24,-66,-41,51,20,127,-26,-19,12,-33,4,34,-34,-49,-40,10,19,31,-32,-14,29,0,1,-17,-17,16,11,28,-11,-1,75,88,22,-61,16,-65,-10,-26,0,3,-29,11,-14,0,20,49,19,19,14,74,32,-7,-7,11,7,21,23,3,-8,-43,-27,6,2,56, 
  /* [3][0][][] */ -18,-22,-40,46,37,-24,5,-34,-10,32,-2,11,-1,-3,46,3,43,-45,1,15,-8,13,-19,19,-1,2,-1,-14,31,-40,48,4,-1,-4,-8,50,-11,-23,0,13,18,-59,22,-21,-18,-6,-10,17,-127,51,-21,21,-125,-35,-18,-45,31,8,-12,57,-13,11,11,11,-23,-84,-32,10,58,21,3,38,-36,3,-5,-38,-33,-50,23,-46,18,-39,29,74,42,58,40,-2,36,-15,-4,16,-17,-1,-12,-18, 
  /* [4][0][][] */ -9,-18,36,-79,-23,-19,-50,19,-28,-49,-20,-6,9,72,15,-14,57,-8,15,-6,-6,9,66,7,-19,-2,8,17,-31,-20,2,-26,-42,13,-3,-8,42,-14,4,-27,16,-11,-112,-24,43,-9,8,-12,-8,47,-6,-7,-16,-35,7,-11,-13,-37,25,47,-9,13,25,3,53,-119,3,-34,-36,12,-20,-9,-12,-1,-27,29,-24,58,65,6,25,31,127,-48,45,-15,-24,3,60,6,-6,3,-59,26,-21,-44, 
  /* [5][0][][] */ 5,0,-12,2,3,-11,6,105,51,-17,-25,-20,-9,34,34,20,4,-11,-10,-29,-47,-18,14,-29,21,11,34,57,71,6,74,51,-59,42,1,-9,-43,-53,-8,-9,-33,-2,6,2,50,1,8,13,8,16,-18,11,-40,-10,9,-1,-26,-21,-18,24,-61,16,-20,-38,14,17,-19,0,5,17,14,-8,24,18,13,-6,3,22,19,127,-1,-52,29,32,3,1,23,-41,8,-29,7,-100,-16,-18,-2,-98, 
  /* [6][0][][] */ -26,-15,-12,-59,29,-21,-25,16,-1,27,-24,-6,33,-63,-16,1,-7,-82,15,22,-1,28,-33,53,106,-21,4,-5,35,13,13,6,-36,44,-17,4,23,-8,21,60,-11,-16,-55,-21,-15,-25,25,-127,39,56,22,11,10,28,-10,-61,41,-19,-14,1,34,25,-17,1,34,83,43,-21,-15,-10,17,-30,43,-4,64,-8,-44,26,8,-4,-24,-22,64,-33,-7,50,43,-39,30,1,-48,11,-11,2,1,22, 
  /* [7][0][][] */ 6,2,32,-19,7,9,-10,-26,5,-10,-19,-19,-18,-84,26,14,-24,-30,-20,-18,16,-17,-43,-2,-8,-5,0,-12,15,18,-3,0,-14,9,-10,-16,-5,-20,-31,20,8,-17,-33,26,-18,9,-20,78,-2,25,-11,-21,-28,23,-5,-71,32,2,-1,3,8,8,-23,-6,-37,62,7,-38,-7,5,-13,39,4,-11,-21,7,36,-2,-16,-24,-4,-57,40,-5,-44,127,4,3,-54,-11,3,14,-21,-1,-3,2, 
  /* [8][0][][] */ -75,35,-59,10,43,-20,-20,23,16,95,-54,35,23,32,55,-2,19,39,-85,40,24,61,-27,34,-65,-15,33,18,56,-88,5,-1,0,67,21,-7,-3,20,-58,63,21,32,18,-127,-48,-5,72,-2,-22,42,5,77,-115,89,7,23,17,-46,-44,-16,-17,-13,14,29,-4,23,47,-27,3,-20,77,118,-21,26,36,20,0,-110,33,-18,-8,-19,46,20,-53,8,34,-74,52,10,-53,24,32,-24,-17,0, 
  /* [9][0][][] */ 26,-53,-21,-30,16,21,-19,48,42,-16,-4,7,-39,-20,7,21,21,13,23,1,-22,12,-10,-16,32,3,38,-29,-33,-52,-18,19,-5,56,34,27,33,49,-18,25,28,19,-7,-72,12,-17,30,-103,-28,24,-9,26,-2,3,-9,5,-24,20,-28,7,0,6,29,33,47,127,42,41,12,-22,40,-13,-5,-16,-33,7,76,11,31,4,-9,16,20,-32,10,55,-3,-22,-39,13,-45,-7,12,11,27,-26, 
  /* [10][0][][] */ 22,37,-20,24,83,-105,-22,-44,-12,54,12,-13,-7,27,17,-91,2,29,2,17,-79,-19,5,-26,-63,-18,-66,43,0,18,3,39,-17,-21,39,-16,64,-13,0,-31,-11,68,34,-26,-51,-18,-37,14,-34,-36,-30,3,-19,-25,0,-25,3,35,-27,-22,1,-15,-12,13,10,36,26,15,26,10,6,51,-42,-23,-59,-9,-9,17,-19,7,20,-29,-79,-67,50,-46,93,-30,-26,21,11,-33,63,23,-15,-127, 
  /* [11][0][][] */ 40,37,-35,31,0,-4,50,1,-1,-6,-22,3,-15,-7,23,-1,-14,-14,-110,-3,2,33,-3,-6,-45,-18,-7,8,16,26,-2,-3,-23,2,9,29,7,-10,-12,18,9,29,55,-94,23,-36,-7,1,-127,20,15,-47,11,43,-18,12,-22,-24,-3,13,0,-16,-4,0,-60,51,-8,19,18,9,37,14,-45,-33,10,30,-2,-40,-61,13,1,-7,93,38,-4,-18,-4,-13,11,32,-8,2,16,-6,-17,22, 
  /* [12][0][][] */ -36,-1,3,13,-29,30,10,-11,127,0,-13,-5,-4,-8,-32,-13,17,16,16,55,59,60,-22,-18,0,1,13,-30,-68,3,9,-39,-1,-16,-8,-10,14,-38,35,4,-41,-21,-2,15,-1,32,-12,-4,24,11,-45,3,4,11,13,-2,66,-27,21,25,11,9,18,-18,-16,19,-41,11,-5,6,-18,-21,7,-6,-61,-1,32,-9,2,-48,-24,-5,45,40,-33,-19,-9,-30,6,14,10,41,0,-9,12,11, 
  /* [13][0][][] */ 30,-10,-32,25,32,-3,9,8,-5,2,9,10,10,-11,5,-4,26,-70,-37,16,1,-15,24,4,-1,16,10,-7,-7,-41,-2,12,-20,14,4,42,28,-10,1,11,7,11,30,43,15,15,-2,-127,26,11,0,6,-18,7,18,16,-14,13,33,6,-8,26,-2,18,2,-20,-10,-71,9,7,12,-31,-15,31,-1,16,-20,1,33,10,38,-13,-5,26,10,28,21,6,12,-10,9,-1,19,9,-8,5, 
  /* [14][0][][] */ -108,-61,37,29,35,-31,-45,-7,-20,12,-11,-14,56,9,-123,-8,49,-19,5,26,-17,-2,37,24,-85,0,10,-23,-43,-62,-48,9,0,11,22,-66,13,17,1,-10,27,40,-17,-40,17,113,57,79,-127,30,17,32,-55,-18,37,-14,-4,6,48,53,37,39,4,16,-11,-19,-63,45,-1,77,-77,-78,-58,-5,-9,48,-19,36,65,-10,41,-4,6,-1,44,8,44,4,17,59,66,-11,-17,16,10,-36, 
  /* [15][0][][] */ 78,-17,45,0,-28,55,28,-17,-24,48,32,3,-77,-15,-18,0,-7,42,41,-11,17,14,-64,46,8,18,22,8,8,44,-67,-77,17,-50,3,-4,30,-32,-43,-127,-4,28,-1,42,-7,43,-7,-27,89,-52,-40,30,36,-103,41,-97,-3,-64,25,29,-101,21,16,26,79,-19,-55,31,-20,68,-41,17,56,24,6,6,18,-51,56,-31,-7,1,35,70,-16,-10,-25,-44,-14,-8,63,-24,-67,43,3,-15, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.016891704872250557, 0.015379327349364758, 0.012739349156618118, 0.0099311713129281998, 0.015567007474601269, 0.01585514098405838, 0.012318002991378307, 0.015322973020374775, 0.0071625495329499245, 0.010674159042537212, 0.017072753980755806, 0.029528321698307991, 0.018896661698818207, 0.018599757924675941, 0.021190648898482323, 0.015786118805408478, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { 3296, -6691, -8267, 24637, 36377, -29, -21144, -8146, 14649, -10075, 34960, 20595, -8053, 11609, 39281, -20070, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00039745189133100212, 0.00036186652141623199, 0.00029974940116517246, 0.00023367462563328445, 0.00036628253292292356, 0.00037306215381249785, 0.00028983535594306886, 0.0003605405509006232, 0.00016853057604748756, 0.00025115668540820479, 0.00040171187720261514, 0.0006947840447537601, 0.00044462733785621822, 0.00043764137080870569, 0.00049860350554808974, 0.0003714381018653512, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ 32,55,-38,77,1,32,-6,-25,29,14,-17,127,-23,-94,58,-88, 
  /* [1][0][][] */ 29,59,-15,-19,40,-40,125,-127,3,108,-17,-30,-4,-47,30,14, 
  /* [2][0][][] */ -127,75,-52,-44,95,2,92,113,0,13,69,-46,-73,49,-1,36, 
  /* [3][0][][] */ -71,91,16,10,-23,45,87,127,-16,55,-107,20,47,-72,-42,-43, 
  /* [4][0][][] */ 2,-31,42,91,-53,70,-12,36,29,-10,1,39,19,28,-127,-61, 
  /* [5][0][][] */ 33,-35,102,-20,52,-78,-8,36,-75,127,-64,-116,6,42,-57,-12, 
  /* [6][0][][] */ 17,5,35,-4,46,43,-88,-52,-3,0,27,9,127,-16,-36,-43, 
  /* [7][0][][] */ 6,1,127,1,-26,-19,12,-15,-49,27,-66,-48,4,5,23,-32, 
  /* [8][0][][] */ 8,50,88,43,-67,79,11,62,60,-4,17,-74,-28,15,-127,-64, 
  /* [9][0][][] */ 44,-97,89,38,20,-37,-10,15,93,-7,40,-11,-53,6,-127,-24, 
  /* [10][0][][] */ -19,-103,17,-1,-100,7,-5,55,72,127,45,4,-70,84,74,0, 
  /* [11][0][][] */ 16,-11,26,-65,12,8,-127,-93,-29,28,-6,-15,11,11,24,-78, 
  /* [12][0][][] */ -3,1,6,-46,-11,-26,-99,-15,-24,-66,-23,32,24,127,108,55, 
  /* [13][0][][] */ -34,-101,-71,38,-22,-73,-8,4,43,21,-16,9,55,25,127,12, 
  /* [14][0][][] */ -3,-26,51,1,36,23,9,127,15,56,-9,-38,16,29,-82,105, 
  /* [15][0][][] */ 25,-34,5,68,15,-2,93,2,12,-127,7,-29,-5,-15,-16,-46, 
  /* [16][0][][] */ 63,-53,-53,31,5,-43,37,-30,104,20,91,-4,23,76,67,127, 
  /* [17][0][][] */ -87,-77,83,127,115,81,28,-34,76,-29,-10,-4,33,22,-99,14, 
  /* [18][0][][] */ -19,14,10,11,-50,-13,-14,22,-74,0,3,-80,-15,-127,26,-27, 
  /* [19][0][][] */ 66,-59,91,-76,118,39,-125,99,119,-68,95,89,-36,80,43,127, 
  /* [20][0][][] */ 38,-5,70,-90,1,10,-30,62,-36,-63,116,-40,-1,3,-77,127, 
  /* [21][0][][] */ -62,-17,1,-45,24,19,-78,-61,-21,74,6,5,-127,-19,34,-1, 
  /* [22][0][][] */ 14,-42,13,-18,7,-39,5,-15,-127,23,-5,-55,-17,-27,80,-18, 
  /* [23][0][][] */ 23,-6,19,-6,-6,10,-3,-1,0,-4,44,-33,127,3,4,-29, 
  /* [24][0][][] */ -30,-1,14,-32,-44,9,42,39,-40,18,-14,-127,30,-51,30,-3, 
  /* [25][0][][] */ -126,9,-21,-8,110,6,-70,-127,-88,77,-6,-101,-73,-84,99,28, 
  /* [26][0][][] */ 3,18,39,-91,127,-56,31,28,116,-23,34,-40,-8,88,-10,51, 
  /* [27][0][][] */ 90,-14,18,-33,-26,-55,-2,-16,-32,17,-127,25,13,-22,-7,30, 
  /* [28][0][][] */ -107,-42,-127,-89,74,-27,61,-68,19,52,-50,22,23,-1,-43,59, 
  /* [29][0][][] */ -52,-53,0,127,28,-20,-62,-72,-34,-35,-67,32,13,-121,45,-36, 
  /* [30][0][][] */ 69,-50,127,-16,58,49,-26,88,-32,-57,39,-21,6,22,-46,113, 
  /* [31][0][][] */ -35,-86,4,-50,-8,-42,38,-39,1,53,109,40,-1,87,71,127, 
  /* [32][0][][] */ -22,105,-34,38,-127,15,-70,-33,-68,-33,-4,69,6,37,20,61, 
  /* [33][0][][] */ 43,-2,8,127,-4,1,13,-47,-104,47,23,-41,20,-10,11,102, 
  /* [34][0][][] */ 26,-20,14,-20,74,-22,-127,-25,-28,78,-37,12,-18,14,12,19, 
  /* [35][0][][] */ 56,17,-5,-2,6,-127,-71,-5,-21,-34,-94,23,91,30,7,4, 
  /* [36][0][][] */ 22,-2,-127,13,45,20,-36,27,-42,-32,-19,3,18,22,-16,23, 
  /* [37][0][][] */ 2,11,127,3,-40,32,39,-63,-9,43,-71,17,13,-6,-1,-1, 
  /* [38][0][][] */ -127,26,5,49,20,68,33,-23,-10,0,114,-15,-25,12,-33,-76, 
  /* [39][0][][] */ -22,-6,16,32,34,-14,-127,35,17,17,-5,-38,2,-22,1,1, 
  /* [40][0][][] */ 16,115,-10,127,-19,52,93,80,-127,-31,-13,54,31,74,-77,-33, 
  /* [41][0][][] */ 22,31,-42,-18,-38,-12,127,85,-61,90,-35,-20,-10,46,25,-18, 
  /* [42][0][][] */ 17,-85,-13,-1,-29,66,-42,60,103,-80,127,70,-21,76,-52,33, 
  /* [43][0][][] */ -73,-30,41,-51,24,-4,-68,-111,7,52,-7,-46,-127,-1,43,5, 
  /* [44][0][][] */ 23,-4,-4,15,30,-9,-17,-45,127,-16,15,51,37,125,-37,61, 
  /* [45][0][][] */ -52,-70,35,-62,-1,-1,10,10,8,-108,1,52,21,127,2,69, 
  /* [46][0][][] */ -26,-1,-17,119,-115,-18,4,-102,-127,68,-58,29,-4,54,22,-69, 
  /* [47][0][][] */ -14,-6,-60,127,-2,64,-9,-32,11,37,55,77,-27,-14,25,-8, 
  /* [48][0][][] */ -16,-7,31,-93,64,0,22,-23,-9,58,22,0,-8,87,127,27, 
  /* [49][0][][] */ -17,97,21,78,-8,-47,-80,28,-66,-89,-75,-96,-42,-83,-125,-127, 
  /* [50][0][][] */ 17,81,4,-127,78,14,7,69,122,-32,-23,-19,0,-34,24,22, 
  /* [51][0][][] */ 4,-34,-2,-33,78,-45,-40,-127,11,-98,20,-29,-10,-21,-17,10, 
  /* [52][0][][] */ 56,19,-17,2,77,-48,-72,127,-60,91,-46,-43,83,88,27,-28, 
  /* [53][0][][] */ -13,79,-1,-90,-28,-22,24,-31,-47,-42,-55,61,-16,-116,-127,-35, 
  /* [54][0][][] */ 0,6,22,29,40,-20,2,-24,-10,7,-7,-4,-5,127,-31,-6, 
  /* [55][0][][] */ -115,127,75,-37,61,-3,-16,-6,-78,11,126,-72,-6,-37,125,16, 
  /* [56][0][][] */ 45,-33,46,-92,51,5,-39,11,24,-40,35,127,-35,6,92,22, 
  /* [57][0][][] */ -51,-11,19,55,-28,31,54,127,0,18,3,-30,-2,59,6,37, 
  /* [58][0][][] */ 3,127,-3,-104,-13,41,-15,22,102,-2,3,66,9,-55,40,58, 
  /* [59][0][][] */ 33,41,29,-63,-33,-29,44,-11,23,36,20,-61,-26,-127,-82,11, 
  /* [60][0][][] */ 42,-33,127,-85,-51,124,10,-36,-15,-14,-23,-20,51,49,48,8, 
  /* [61][0][][] */ -23,21,-52,-38,-64,23,127,88,-8,95,-19,-8,-18,67,-8,-35, 
  /* [62][0][][] */ 4,55,15,24,-75,25,-72,57,-70,-57,-14,-75,69,-113,127,49, 
  /* [63][0][][] */ -11,-66,61,-118,67,7,-127,-127,-54,90,-1,30,110,25,74,-36, 
  /* [64][0][][] */ -24,26,53,16,73,-9,-40,-114,16,-127,-12,-40,3,-21,-12,10, 
  /* [65][0][][] */ -127,-6,27,-71,-2,75,37,-57,-65,29,42,-2,7,20,-6,-19, 
  /* [66][0][][] */ 89,-19,117,-9,-31,25,-46,15,-87,-14,86,-88,-54,37,-127,-56, 
  /* [67][0][][] */ 70,17,-21,70,103,-127,-61,-95,76,-91,-76,-65,-95,42,-91,18, 
  /* [68][0][][] */ 41,-64,-79,99,-89,-95,-39,-74,28,-6,6,-16,-81,107,127,-31, 
  /* [69][0][][] */ 17,11,-77,84,-9,-122,-2,127,67,29,38,-12,101,43,-21,2, 
  /* [70][0][][] */ 39,35,-61,-54,-65,7,127,109,-45,48,-12,17,-2,48,33,6, 
  /* [71][0][][] */ 14,-2,-33,-34,10,23,-8,39,-42,-31,16,-11,-1,-127,65,-10, 
  /* [72][0][][] */ 15,34,11,27,6,-38,-19,-127,6,59,-39,59,40,55,51,56, 
  /* [73][0][][] */ -43,-127,-41,-80,-67,-39,44,-40,-14,12,-48,-24,19,-59,62,-16, 
  /* [74][0][][] */ -23,36,60,69,-8,2,-127,65,15,-47,-41,-34,-22,-9,-9,25, 
  /* [75][0][][] */ -54,36,-45,6,-14,82,82,97,8,59,9,-31,-127,59,21,26, 
  /* [76][0][][] */ 16,-5,-62,-50,53,-60,-127,-98,-8,22,23,-20,25,-1,66,-21, 
  /* [77][0][][] */ -49,18,-44,-18,-58,-13,0,-50,127,21,-84,19,-21,37,19,-97, 
  /* [78][0][][] */ -88,-127,-3,80,73,81,-32,40,13,-80,-107,59,36,-14,95,88, 
  /* [79][0][][] */ 31,-6,36,-54,127,22,48,19,84,17,-2,29,-14,-31,14,-48, 
  /* [80][0][][] */ -21,-41,64,-108,-23,-29,6,16,-72,-29,-6,-70,-2,127,-50,19, 
  /* [81][0][][] */ 38,40,58,-8,22,49,-15,-25,0,-24,42,-77,-11,4,-127,24, 
  /* [82][0][][] */ -94,-35,41,-72,-27,-11,-13,-6,-69,-10,-56,-100,-40,-127,-105,-24, 
  /* [83][0][][] */ 2,-13,4,-65,-67,27,-2,68,-99,-22,35,-96,57,-127,51,81, 
  /* [84][0][][] */ 127,49,23,53,-40,-12,-42,37,-9,-26,103,-3,-75,21,75,-66, 
  /* [85][0][][] */ -1,-18,30,-28,68,4,-47,127,-87,-124,-82,-13,-28,98,74,-127, 
  /* [86][0][][] */ 19,-69,-9,-6,-69,44,-86,2,-48,-42,26,-41,-26,-127,-11,30, 
  /* [87][0][][] */ 127,-75,18,-28,-55,-27,4,-41,-20,20,-89,-20,22,-6,2,44, 
  /* [88][0][][] */ 48,23,-36,-40,-8,-45,-49,-20,63,-5,82,2,-26,-72,127,-73, 
  /* [89][0][][] */ 28,67,-107,-17,-56,-29,40,-69,68,55,16,-35,-41,12,-18,-127, 
  /* [90][0][][] */ -30,-49,-1,-106,-76,42,127,-74,112,-77,20,-92,18,-17,-57,9, 
  /* [91][0][][] */ 10,9,-11,-99,-56,17,49,-56,-58,36,72,62,26,-24,49,127, 
  /* [92][0][][] */ 14,2,10,16,75,-23,-68,-127,43,-60,-9,-7,-38,-16,9,5, 
  /* [93][0][][] */ 57,-31,46,-124,-63,3,-30,25,41,-68,84,-2,-16,127,2,7, 
  /* [94][0][][] */ -94,36,-80,23,66,-127,-16,14,-12,-51,66,-23,12,-2,-30,-6, 
  /* [95][0][][] */ -18,33,54,-127,9,-8,-26,-18,3,-31,-73,-53,-22,27,-81,-46, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00090403202921152115, 0.00043222721433266997, 0.00049884273903444409, 0.00027453355141915381, 0.00042548382771201432, 0.00081876025069504976, 0.0016856500878930092, 0.0010012633865699172, 0.00023472722386941314, 0.0012064367765560746, 0.0010182677069678903, 0.00104370410554111, 0.00040569042903371155, 0.0006672945455648005, 0.00032898533390834928, 0.0011919774115085602, 0.00066649285145103931, 0.00045318706543184817, 0.00069231603993102908, 0.00050666922470554709, 0.0010252648498862982, 0.0015277606435120106, 0.00054911046754568815, 0.001784137450158596, 0.002857815008610487, 0.00057807599660009146, 0.00056400679750367999, 0.00072226306656375527, 0.00075294374255463481, 0.00028669490711763501, 0.00023209779465105385, 0.00046277671935968101, 0.00059487082762643695, 0.00085189670789986849, 0.00069219776196405292, 0.0006575646111741662, 0.0010076472535729408, 0.00095705490093678236, 0.00039844628190621734, 0.0019154715118929744, 0.00034821240114979446, 0.00075997324893251061, 0.00018102496687788516, 0.000799021334387362, 0.0003394650702830404, 0.00071088096592575312, 0.00065176317002624273, 0.00073327630525454879, 0.00023415913165081292, 0.00062330981018021703, 0.00052555545698851347, 0.00058675656327977777, 0.00087004003580659628, 0.00071360974106937647, 0.0018213199218735099, 0.00044674018863588572, 0.00061472150264307857, 0.00036760370130650699, 0.0012081202585250139, 0.00052366126328706741, 0.00078147271415218711, 0.00032942340476438403, 0.00060948013560846448, 0.00049799226690083742, 0.00093415542505681515, 0.0006026015616953373, 0.0007794715347699821, 0.00077205686829984188, 0.00065796345006674528, 0.00061059650033712387, 0.00081336288712918758, 0.00062676204834133387, 0.00038914007018320262, 0.00063899962697178125, 0.0010984984692186117, 0.0012405328452587128, 0.000751650077290833, 0.0010338308056816459, 0.00086708151502534747, 0.00098161364439874887, 0.00045890212641097605, 0.00053809233941137791, 0.0005887081497348845, 0.00040652265306562185, 0.0011150280479341745, 0.00061883818125352263, 0.00083912961417809129, 0.00022881264158058912, 0.00034587678965181112, 0.00059941998915746808, 0.00054015038767829537, 0.001041697571054101, 0.0008574748644605279, 0.00053325638873502612, 0.00095635157776996493, 0.00048052752390503883, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 1485, 10676, 11717, 25981, 21980, -3982, -1575, 5113, 31016, -3441, 8136, 2605, 9891, 10833, 22211, 1566, 2078, 8351, 9640, 6970, -13, 450, 11313, -1107, 2883, 321, 12052, 6090, 6611, 37991, 37551, 16635, 8795, -1139, 9089, 2741, 1611, 4816, 20712, -911, 16475, 6265, 46744, -4238, 29779, 6534, 7972, 11040, 54645, 10525, -626, 8959, -3936, -385, -1719, 7391, -551, 15812, 5134, 8662, 6333, 13457, 7645, 6057, 8163, 9900, 5132, -5356, 8086, -3849, 4255, 7630, 16790, 5172, -4441, -3289, 6857, 270, 2590, -1165, 13923, 9515, 4262, 15101, 3074, 428, 8500, 51758, 12990, 11801, 7560, -260, 5348, 9474, 3609, 10865, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00029173927032388747, 0.00013948361447546631, 0.00016098104242701083, 8.8594446424394846e-05, 0.00013730746286455542, 0.00026422130758874118, 0.00054397445637732744, 0.00032311669201590121, 7.5748583185486495e-05, 0.00038932799361646175, 0.00032860416104085743, 0.00033681269269436598, 0.00013091994333080947, 0.00021534194820560515, 0.00010616652434691787, 0.00038466183468699455, 0.00021508324425667524, 0.00014624754840042442, 0.00022341661679092795, 0.00016350671648979187, 0.00033086218172684312, 0.00049302208935841918, 0.00017720289179123938, 0.00057575717801228166, 0.00092224258696660399, 0.00018655032909009606, 0.00018201007333118469, 0.00023308079107664526, 0.00024298172502312809, 9.2519025201909244e-05, 7.4900046456605196e-05, 0.0001493422023486346, 0.00019197016081307083, 0.00027491472428664565, 0.00022337844711728394, 0.00021220200869720429, 0.00032517683575861156, 0.000308850227156654, 0.00012858219270128757, 0.00061813986394554377, 0.00011237127182539552, 0.00024525020853616297, 5.8418383559910581e-05, 0.00025785138132050633, 0.00010954843310173601, 0.00022940768394619226, 0.00021032983204349875, 0.0002366348635405302, 7.556525815743953e-05, 0.00020114767539780587, 0.0001696014660410583, 0.00018935161642730236, 0.00028076974558643997, 0.00023028827854432166, 0.00058775633806362748, 0.00014416707563214004, 0.0001983761612791568, 0.00011862901737913489, 0.0003898712748195976, 0.00016899019828997552, 0.00025218827067874372, 0.00010630789620336145, 0.00019668471941258758, 0.00016070657875388861, 0.00030146035715006292, 0.00019446494115982205, 0.00025154248578473926, 0.00024914968525990844, 0.0002123307203873992, 0.00019704498117789626, 0.00026247953064739704, 0.00020226175547577441, 0.00012557899754028767, 0.00020621092699002475, 0.00035449533606879413, 0.00040033110417425632, 0.00024256424512714148, 0.00033362649264745414, 0.00027981499442830682, 0.00031677554943598807, 0.00014809184358455241, 0.00017364723316859454, 0.00018998140876647085, 0.00013118851347826421, 0.00035982957342639565, 0.0001997046492761001, 0.0002707946696318686, 7.3839895776472986e-05, 0.00011161754810018465, 0.0001934382162289694, 0.0001743113825796172, 0.00033616516157053411, 0.00027671485440805554, 0.00017208662757184356, 0.00030862324638292193, 0.00015507054922636598, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -44,-71,-12,127,22,72,74,-62,-15,-17,-14,-6,-28,4,36,0,-9,-44,26,23,21,-127,127,6,-75,13,51,-29,-127,-127,41,25,13,25,61,-19,-30,-11,30,-7,-13,28,-111,72,23,-72,39,44,-18,52,-19,19,3,-8,16,48,-89,-48,-59,-19,-12,1,12,39,68,-27,75,12,-9,18,20,127,24,23,30,1,-11,16,127,-4,-16,14,-26,21,123,22,-74,-15,-3,-34,-18,-37,0,-27,-14,27, 127,-127,65,105,-43,127,37,-121,69,5,-17,127,127,-100,-15,16,12,127,127,-110,127,-82,82,67,-127,-113,-61,-35,-54,46,-58,-20,-88,58,-127,-84,-43,-15,-54,57,-1,127,127,88,-52,-118,-111,-50,-15,-127,44,80,70,-30,45,86,-46,42,-78,-110,-45,-43,-61,69,72,-63,27,34,-82,32,-19,91,117,127,17,19,2,59,-31,52,64,127,127,-22,-10,76,-106,127,-116,-101,5,-127,-91,-127,-37,104, -70,-12,24,-81,15,-28,64,-10,80,-35,-28,20,-19,-6,-9,-11,-8,-15,6,-3,-25,-104,32,-2,-119,102,8,-58,116,49,-14,8,0,11,15,-32,-9,33,18,12,26,14,-123,69,14,-19,38,15,-14,11,-9,6,-12,-3,-3,23,-66,7,-30,50,1,41,36,0,-7,-42,-29,24,10,3,-3,37,10,-27,2,4,-12,-6,-81,6,-22,-26,-20,3,-109,13,-32,-21,-51,25,-27,-36,29,-27,-13,3, 
  /* [0][1][][] */ -64,-73,66,-35,-49,94,19,127,-51,-21,-1,-117,24,-114,78,32,-3,-60,-16,89,54,-68,49,54,-87,-12,127,-22,-26,64,124,-104,-127,86,-87,-56,-36,31,-28,98,-49,-27,-5,48,-50,127,-24,62,15,98,24,-4,17,-57,28,33,127,122,-69,-83,127,-33,-37,127,70,-40,-13,0,127,42,127,98,-40,103,-3,13,14,13,-30,11,-46,124,-77,110,3,36,-52,31,76,-127,-36,-4,127,-69,-22,1, 67,127,46,-113,127,82,83,38,-127,127,127,-37,-67,-127,-127,127,127,-62,-121,-50,101,100,-124,127,-112,-91,-39,127,-124,110,-127,-127,-87,127,108,127,127,-127,-109,127,-65,-97,110,-127,-127,-37,-127,-127,127,-111,89,40,127,127,127,-127,99,-127,-127,127,17,-79,-127,-97,-127,127,-127,127,-124,-127,-108,-83,-127,-80,127,127,-127,127,-76,127,127,30,-40,-127,59,127,94,47,127,14,127,2,-69,33,127,-127, -53,-12,-49,36,-57,-99,34,-28,19,-33,-29,96,0,101,15,9,-4,66,-6,127,-1,-74,-40,10,-70,106,-67,-21,-68,-18,17,-62,-74,41,6,-20,-29,44,-68,40,127,-5,-41,33,-43,-61,16,45,8,120,-5,6,-36,-75,6,20,96,2,0,22,-34,127,95,-50,-43,11,40,-11,-74,123,-18,-84,0,-55,-15,-20,27,14,73,-32,-73,-46,50,15,-48,-13,71,24,15,65,-46,20,-45,94,-25,-5, 
  /* [0][2][][] */ -64,2,-8,-21,12,-40,71,29,54,-28,-36,-1,17,27,-26,1,-7,65,6,2,-51,-76,1,-7,-25,-60,34,-70,87,40,26,26,15,-6,-11,-45,-7,34,0,3,-17,-8,-69,109,3,31,10,33,-16,-30,12,-22,21,-3,10,15,-69,26,-11,14,20,1,-23,-4,-2,-47,-46,16,-29,17,24,27,14,-18,31,5,17,5,-79,-13,-10,-7,17,16,-127,10,17,-42,-54,-49,-29,-49,8,56,-18,-8, 124,34,-127,-38,-72,-22,40,33,-67,-31,-16,-105,-77,126,-14,36,7,-49,-8,-125,97,-50,-40,-2,-112,127,-51,21,-32,-20,-6,-6,-61,19,27,6,-24,-30,127,55,9,-13,67,-23,-38,78,-71,-46,-33,-7,-127,-127,-53,-25,3,42,-65,-7,9,41,-6,-16,11,-45,-57,33,64,-21,117,111,-23,-70,14,-58,6,4,100,2,49,21,13,-104,-49,3,4,9,127,40,-53,41,-20,-110,40,77,-9,24, -50,14,-20,24,16,-68,-127,3,-13,-7,-16,8,13,-19,19,-3,-7,-15,4,17,-48,-70,13,-1,15,-102,22,1,-47,-39,-6,15,38,-13,-7,-25,-36,2,42,-42,22,-2,-51,-23,2,69,21,14,-10,-2,11,-10,13,3,-1,-3,-60,-12,6,-32,-8,11,84,-10,32,-1,3,30,4,5,-4,19,-17,16,0,17,36,0,74,-11,3,-13,-12,-16,74,1,46,-37,59,43,-18,-57,-8,0,-14,-17, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0050403689965605736, 0.0036788992583751678, 0.0057455846108496189, 0.0089322943240404129, 0.010129266418516636, 0.0072984034195542336, 0.0035099638625979424, 0.003711966797709465, 0.010165173560380936, 0.0059124007821083069, 0.010639968328177929, 0.004495787899941206, 0.010795404203236103, 0.009108884260058403, 0.017213322222232819, 0.0064709912985563278, 0.008617546409368515, 0.007786113303154707, 0.0086505701765418053, 0.0034951858688145876, 0.0025962418876588345, 0.0019644058775156736, 0.0056595820933580399, 0.0040697036311030388, 0.0041117188520729542, 0.0036221714690327644, 0.008919714018702507, 0.0066254297271370888, 0.0031031984835863113, 0.020160743966698647, 0.016237551346421242, 0.010528557002544403, 0.005396802444010973, 0.0068995067849755287, 0.010909306816756725, 0.019997080788016319, 0.018235169351100922, 0.0094206733629107475, 0.0097977593541145325, 0.0041760788299143314, 0.0094933714717626572, 0.007697361521422863, 0.013746368698775768, 0.0044234483502805233, 0.015023523941636086, 0.0042507429607212543, 0.0046703396365046501, 0.011000783182680607, 0.028304029256105423, 0.0041340445168316364, 0.018019312992691994, 0.0082591399550437927, 0.012336628511548042, 0.007383397314697504, 0.010894361883401871, 0.0055770822800695896, 0.00541694276034832, 0.017138965427875519, 0.0018186859088018537, 0.0072764982469379902, 0.013310009613633156, 0.012851621024310589, 0.0047036190517246723, 0.0064191557466983795, 0.0058014141395688057, 0.0054894699715077877, 0.01072937436401844, 0.0094695761799812317, 0.0094960574060678482, 0.0079077780246734619, 0.0077190687879920006, 0.0040830047801136971, 0.011477015912532806, 0.0055807381868362427, 0.018576905131340027, 0.012343697249889374, 0.0062834783457219601, 0.0037715360522270203, 0.0029915382619947195, 0.0068261097185313702, 0.0086970329284667969, 0.0090668164193630219, 0.0077945147641003132, 0.010437937453389168, 0.0026388755068182945, 0.0053709917701780796, 0.0033632812555879354, 0.021070132032036781, 0.016205795109272003, 0.0050826496444642544, 0.014688080176711082, 0.0013056062161922455, 0.0062203970737755299, 0.0051644505001604557, 0.012976880185306072, 0.010246915742754936, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 18438, 65086, 1487, -62, 14828, -4738, -44, -892, 6027, 16995, -4768, -753, 986, 2413, 5243, -9638, -4145, -665, -17, 12848, -12391, 17311, -2244, 7381, 32821, -423, -5614, 19959, 12982, -19857, 452, 22260, 24336, -9302, 1769, 701, -44, 277, 4568, -8293, -5062, -691, -7888, -807, 31705, -734, 13047, -125, -14522, 856, -198, 762, -1787, 16681, -3231, 13105, 21586, -234, 35264, -520, -9051, -832, 1422, -24, -202, 13748, -2078, -9524, -2652, 2081, -11, -4248, 740, -34, -1634, -6451, -710, -1622, 36199, -8144, -5314, -10474, 519, -427, 56784, -12817, -11058, -28859, -5047, 8714, -1788, 34584, 417, -1417, -3565, 1206, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00011859692313009873, 8.6562336946371943e-05, 0.00013519023195840418, 0.00021017163817305118, 0.00023833569139242172, 0.00017172713705804199, 8.2587386714294553e-05, 8.7340398749802262e-05, 0.00023918056103866547, 0.00013911532005295157, 0.00025035219732671976, 0.00010578324872767553, 0.0002540095301810652, 0.00021432669018395245, 0.00040501935291104019, 0.00015225862443912774, 0.00020276580471545458, 0.00018320267554372549, 0.00020354283333290368, 8.2239668699912727e-05, 6.1088045185897499e-05, 4.6221317461458966e-05, 0.00013316664262674749, 9.5757735834922642e-05, 9.6746327471919358e-05, 8.5227562522049993e-05, 0.00020987562311347574, 0.0001558924705022946, 7.3016439273487777e-05, 0.00047437046305276453, 0.00038206003955565393, 0.00024773075710982084, 0.00012698359205387533, 0.00016234134091064334, 0.00025668958551250398, 0.00047051956062205136, 0.00042906281305477023, 0.00022166290727909654, 0.00023053551558405161, 9.8260679806116968e-05, 0.00022337345581036061, 0.00018111438839696348, 0.00032344396458938718, 0.00010408114030724391, 0.00035349468817003071, 0.0001000174815999344, 0.00010989034490194172, 0.00025884195929393172, 0.00066597718978300691, 9.7271637059748173e-05, 0.00042398384539410472, 0.00019433270790614188, 0.00029027363052591681, 0.00017372699221596122, 0.00025633792392909527, 0.00013122546079102904, 0.00012745747517328709, 0.00040326977614313364, 4.2792609747266397e-05, 0.00017121172277256846, 0.00031317671528086066, 0.00030239109764806926, 0.00011067339073633775, 0.00015103895566426218, 0.00013650386244989932, 0.00012916400737594813, 0.00025245588039979339, 0.00022281355632003397, 0.00022343665477819741, 0.0001860653719631955, 0.00018162514606956393, 9.6070703875739127e-05, 0.00027004742878489196, 0.00013131149171385914, 0.00043710364843718708, 0.00029043992981314659, 0.00014784655650146306, 8.8742024672683328e-05, 7.0389134634751827e-05, 0.00016061434871517122, 0.0002046360750682652, 0.00021333685435820371, 0.00018340034876018763, 0.00024559852317906916, 6.2091188738122582e-05, 0.00012637628242373466, 7.9136028944049031e-05, 0.00049576780293136835, 0.00038131282781250775, 0.00011959175753872842, 0.00034560190397314727, 3.0720148060936481e-05, 0.00014636229025200009, 0.00012151648115832359, 0.00030533835524693131, 0.00024110390222631395, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -27,-14,-15,-38,25,-14,-48,-11,16,4,-12,3,-5,-23,-23,2,-10,5,-1,-7,12,-46,4,3,-10,15,4,127,26,-33,34,-13,-10,-10,2,6,-18,14,-33,-11,-16,-7,1,26,-11,13,16,4,15,1,-9,-5,20,-10,-17,84,9,4,-31,-33,-19,19,0,-18,-40,-66,-13,42,-5,7,15,-13,-12,-24,-15,-23,-34,15,-2,2,-5,-32,22,13,-6,-17,-18,-84,-5,-22,6,-10,40,-39,-35,-15, 
  /* [1][0][][] */ 14,-93,-78,-39,106,-25,74,28,-24,-95,-53,-39,-5,-1,-81,28,-77,32,57,55,15,40,-10,-79,37,-19,-24,-76,38,-27,-85,20,-21,44,-12,1,46,-3,43,28,-33,44,-35,-38,-55,106,12,33,33,-84,27,-24,-70,55,47,8,-26,-27,-50,-48,21,-24,0,-57,-84,112,-13,-39,-11,-44,-24,23,44,-127,-21,0,0,-55,57,20,35,-15,72,14,-60,47,-37,9,44,-51,10,24,38,20,35,118, 
  /* [2][0][][] */ 22,66,-77,-15,96,83,33,80,2,-120,4,7,8,-20,46,29,28,-20,-60,60,21,0,64,35,28,25,7,-40,31,-6,81,-60,43,27,-9,45,-127,-74,-7,26,3,-53,9,-9,31,-39,4,44,-19,25,-27,-16,110,-13,-21,53,6,17,27,4,23,30,24,-28,32,-8,-14,14,-51,12,-8,-52,-19,-71,10,63,101,51,17,-3,7,-41,-14,-12,-34,23,18,59,-19,35,6,-35,-6,-38,-40,-4, 
  /* [3][0][][] */ 70,9,103,-3,16,-47,14,12,-23,-67,29,-48,-9,72,33,104,13,-4,38,11,109,18,40,0,80,-36,-23,6,38,60,24,98,-114,48,26,-10,-12,-5,5,31,-81,-7,70,7,47,43,-62,-86,-42,-29,-65,57,-26,-127,9,3,-94,69,66,35,41,91,-25,-63,24,79,-19,-77,48,-33,-3,-51,43,-36,66,-20,-13,-7,52,22,-28,-62,40,-12,-22,29,23,20,32,9,30,57,45,107,47,-32, 
  /* [4][0][][] */ 21,9,11,-24,127,32,-7,-24,-29,-43,-40,-18,-29,2,0,44,29,-69,-44,71,-6,-7,24,-6,-21,-2,19,-26,-2,-19,49,-36,66,-4,-17,19,24,17,-4,9,-21,-16,-29,-13,-21,-60,-4,3,21,11,-22,-2,19,-23,1,-14,14,-10,-32,28,-5,51,44,33,36,29,-9,9,-48,9,40,52,11,-51,-47,-31,31,31,64,-32,-18,-39,-19,-16,-58,3,30,51,-55,34,-11,-47,4,-12,21,-23, 
  /* [5][0][][] */ 19,-4,21,16,9,-2,53,-2,-25,-43,-9,14,3,42,1,21,3,-4,4,-5,31,34,-46,73,12,-12,15,-118,4,31,29,34,8,23,12,-61,35,19,-21,13,-9,8,20,-7,15,-17,4,-30,-5,-11,17,-15,1,-44,2,-70,-19,22,-21,19,92,18,-6,27,-2,66,7,71,19,95,23,33,20,5,14,66,-16,-11,7,16,-23,-8,-8,34,5,28,1,127,14,39,-2,-5,7,10,-49,32, 
  /* [6][0][][] */ 19,-84,18,-25,-49,8,40,27,2,5,-13,-76,-38,13,-36,31,8,-2,8,0,-50,48,17,0,0,-9,-20,-19,-9,12,34,-3,65,27,54,-10,4,-12,42,-80,-22,98,6,-34,24,-12,-25,26,-9,23,-23,85,-42,-60,3,-13,15,-59,-4,6,-1,57,46,-87,30,-24,-5,-26,9,-5,127,3,-39,-4,-14,23,-90,-5,24,11,38,45,48,11,-24,8,46,8,25,10,49,-27,-11,8,-36,-10, 
  /* [7][0][][] */ -28,127,18,12,110,31,52,-49,-29,-12,33,-32,-36,25,21,16,-22,-35,24,44,38,-43,51,-21,4,-2,-4,11,13,-15,-10,18,31,-11,-63,3,21,15,9,85,-65,26,19,-8,-36,-19,31,-14,-45,-51,29,17,-13,-35,-38,64,93,5,-28,-9,-22,-58,7,-20,-82,79,-45,-119,-20,-64,-8,87,-45,-26,2,8,15,75,56,-23,-31,-48,8,-10,-36,61,-27,-41,-34,14,-33,-37,-70,-14,8,2, 
  /* [8][0][][] */ 13,9,98,39,-127,-2,68,-3,38,64,57,24,9,30,30,12,-22,5,-1,17,-26,13,-118,74,20,-42,65,-23,14,13,3,52,81,10,11,-13,-7,-18,1,49,31,-10,39,35,-19,-21,44,7,-92,16,25,44,-60,-50,-26,34,-8,-30,-84,-4,49,-11,-48,-2,24,83,-5,-46,40,-4,-32,-34,50,40,72,-7,-5,-58,-8,22,-97,24,-19,8,36,31,85,40,18,-24,36,54,27,-10,57,37, 
  /* [9][0][][] */ 30,-95,22,33,70,124,-1,9,48,-53,93,102,3,42,114,-84,44,-43,-30,19,-63,-6,18,-10,7,-13,-1,18,-11,-5,13,0,38,51,-79,41,19,11,-42,87,48,-56,-27,114,43,-42,-87,-44,34,28,-19,-58,70,31,-8,-81,-40,122,-5,10,64,-17,-47,127,-70,-7,-3,-13,9,59,-34,-98,70,-12,31,17,72,-85,19,12,-34,-24,-9,42,10,-45,50,-18,8,-18,-76,51,-53,-19,27,-20, 
  /* [10][0][][] */ -59,-26,-52,-55,-28,-25,58,-33,37,20,25,39,13,-21,-6,-10,-19,31,-22,-31,-1,26,20,21,-20,-11,2,-127,22,-49,53,-41,-11,0,-13,-8,-15,36,7,-22,2,-54,24,-78,-2,7,31,19,-13,35,-41,-31,-38,-17,-11,-57,37,6,-8,-53,16,2,-2,8,-53,93,-20,-38,4,-34,0,-15,-46,-3,9,55,-22,39,-15,10,-14,-6,12,20,1,-19,-25,125,-11,-11,16,12,15,-39,39,-51, 
  /* [11][0][][] */ -74,9,18,4,0,-62,-10,11,-50,-3,3,10,18,40,-32,-6,54,12,-61,-44,14,3,-9,-5,86,4,57,-7,-11,39,-38,24,6,26,-14,-14,10,10,36,7,-13,6,9,0,90,19,69,16,57,47,4,33,-9,-78,32,-17,-59,-22,-33,-47,3,-12,-4,13,-3,-13,24,-3,28,1,-10,29,-13,1,35,6,-11,76,-113,68,-31,6,-57,-57,127,21,48,-15,22,45,-23,-45,-8,58,-26,-2, 
  /* [12][0][][] */ -26,-19,-54,2,44,3,-15,-25,-21,24,15,-11,-9,-17,22,-8,-37,-3,27,-17,-18,-24,-23,34,-19,46,-24,90,-12,28,-30,5,-21,25,-4,29,-16,-19,41,5,-7,-7,0,-16,-45,14,20,21,-9,-4,6,-32,-28,16,-19,-17,14,-18,21,7,-31,-31,17,40,35,-71,13,51,-26,-127,-13,50,-1,7,7,72,-27,-5,-1,5,0,15,-15,2,11,-21,-13,-38,-4,-1,5,5,-36,39,-13,15, 
  /* [13][0][][] */ -65,76,24,18,-70,24,12,36,-32,-25,33,27,108,27,-13,10,-1,24,-65,27,30,15,52,-48,72,14,12,-8,24,-26,-26,-94,-66,0,26,-6,12,20,19,10,-21,102,-10,49,71,-7,-16,8,73,-24,31,91,44,-73,74,-22,-47,83,44,19,51,62,-34,24,25,-14,-6,20,39,33,40,-127,39,-32,-53,0,81,39,-48,-35,71,-9,-5,-8,27,-28,110,-6,-28,16,-19,35,46,-37,-15,22, 
  /* [14][0][][] */ -57,13,-41,-61,27,-16,-20,18,-85,8,15,11,-34,-73,-87,-25,-105,-7,86,14,34,-18,24,-113,-29,15,-55,-13,5,-24,-14,-38,-78,-41,7,13,-20,3,24,-7,-2,68,-72,-30,-70,33,14,21,127,-35,27,-12,9,69,-96,30,-1,16,-112,6,-4,14,52,32,-2,26,0,-2,-62,9,48,44,17,-2,-43,13,24,-74,-14,-89,28,-40,29,35,18,-72,-57,-4,-41,13,30,48,6,35,13,-6, 
  /* [15][0][][] */ -37,-73,-21,-47,10,5,-2,-63,-19,12,-1,-20,40,-29,49,-12,-93,-6,-17,10,-5,-8,-69,-34,-18,-4,-2,23,-28,-5,62,-85,-12,6,19,13,-16,24,-92,5,20,-75,1,26,-28,-43,55,26,34,13,-24,-127,2,56,-7,48,28,-12,-22,40,-9,-1,38,13,7,-14,-6,8,-35,22,5,31,-30,13,-8,-30,-34,-4,5,2,-2,31,-14,54,-20,-47,-34,-22,-38,44,35,67,-33,-7,4,-18, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.036513525992631912, 0.016855735331773758, 0.0092758238315582275, 0.0079964539036154747, 0.020589325577020645, 0.014419317245483398, 0.014946920797228813, 0.011043119244277477, 0.0135633684694767, 0.010759049095213413, 0.028986178338527679, 0.02372460812330246, 0.019359355792403221, 0.010191698558628559, 0.019678233191370964, 0.022955484688282013, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -6227, 22149, -20407, 752, -11797, 10078, 27735, -51352, -8584, 11165, 31265, 14381, -4612, 3914, -2180, 11212, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.00085914181545376778, 0.0003966055519413203, 0.00021825468866154552, 0.0001881518546724692, 0.00048445473657920957, 0.00033927804906852543, 0.00035169225884601474, 0.00025983809609897435, 0.00031913808197714388, 0.00025315411039628088, 0.00068202771944925189, 0.00055822607828304172, 0.00045551426592282951, 0.0002398046781308949, 0.00046301726251840591, 0.00054012908367440104, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -41,107,-17,-127,-49,-35,-20,-54,-15,14,-3,81,26,-59,-8,40, 
  /* [1][0][][] */ -24,32,-72,-5,-11,-43,16,-82,65,43,-65,29,5,1,49,-127, 
  /* [2][0][][] */ -9,5,-53,36,22,19,-45,-34,127,-42,5,44,-21,94,-62,40, 
  /* [3][0][][] */ 58,-68,3,-108,16,-32,-22,-13,90,-14,65,32,10,34,28,127, 
  /* [4][0][][] */ -60,43,13,30,26,-33,2,34,-11,7,13,-38,-127,-17,-13,35, 
  /* [5][0][][] */ 47,12,125,-34,62,70,-127,80,-65,120,-21,-52,44,-105,-123,76, 
  /* [6][0][][] */ 28,-26,110,-127,24,-4,-25,96,-83,-108,43,-42,27,80,-16,87, 
  /* [7][0][][] */ 49,127,-29,-63,107,5,-8,-39,111,80,-29,13,46,-28,69,55, 
  /* [8][0][][] */ 5,-95,15,-69,28,-50,16,-73,31,64,70,2,6,127,70,48, 
  /* [9][0][][] */ 2,-17,-12,127,38,0,44,-59,-66,108,25,-15,-4,-67,-13,-19, 
  /* [10][0][][] */ 6,7,-40,-127,17,0,-21,24,23,-25,22,-31,-16,-47,-1,43, 
  /* [11][0][][] */ 8,8,23,-15,79,-27,76,-59,-84,41,-6,30,-3,127,-64,-31, 
  /* [12][0][][] */ 50,5,-127,-9,23,-81,-11,34,26,70,-91,-28,-37,115,-30,21, 
  /* [13][0][][] */ -15,0,-28,9,3,-127,-7,11,-6,-10,8,-9,12,-19,11,17, 
  /* [14][0][][] */ 20,-41,105,-21,57,13,-127,-92,-13,-31,39,25,-6,-55,-32,-35, 
  /* [15][0][][] */ -88,11,16,-29,2,19,127,51,-17,63,41,-29,-7,85,24,-23, 
  /* [16][0][][] */ -4,31,127,96,-3,28,91,47,-65,29,-49,12,-1,17,-1,-94, 
  /* [17][0][][] */ -33,-110,-15,25,-67,-26,-64,10,-127,-31,12,-46,-7,34,59,-35, 
  /* [18][0][][] */ 9,32,-18,56,49,-8,10,2,87,29,-20,-48,1,127,74,46, 
  /* [19][0][][] */ 9,-38,48,22,96,37,-127,-101,-106,-52,-15,-97,-62,-64,-4,-35, 
  /* [20][0][][] */ 123,-84,-64,-31,32,-127,-9,1,-46,61,-106,-20,14,9,41,12, 
  /* [21][0][][] */ 78,-33,75,-22,-12,-4,-15,102,-15,-105,68,35,-11,127,40,87, 
  /* [22][0][][] */ -37,83,-70,120,-82,0,127,105,0,32,-11,48,-19,-8,33,-3, 
  /* [23][0][][] */ 53,55,91,-94,32,-27,17,83,2,-7,-27,-15,25,-15,-127,12, 
  /* [24][0][][] */ -127,49,21,-19,7,108,22,-26,-8,6,113,-2,-82,13,66,-35, 
  /* [25][0][][] */ 22,34,13,24,7,10,65,-40,-1,-127,-17,-15,-5,-24,10,16, 
  /* [26][0][][] */ -46,0,1,10,-51,-10,-30,-27,-101,-35,-2,-35,18,127,-38,47, 
  /* [27][0][][] */ -9,27,7,63,41,-32,-10,-30,54,7,-29,-3,14,127,-12,14, 
  /* [28][0][][] */ 13,77,59,67,127,-2,19,48,-94,-34,-46,-35,14,101,48,-35, 
  /* [29][0][][] */ 0,-1,9,18,27,-1,9,38,-22,-12,-19,-127,1,-14,-20,5, 
  /* [30][0][][] */ -16,113,-61,78,-40,-28,49,-127,-56,52,-27,-7,75,35,91,98, 
  /* [31][0][][] */ -25,-30,-12,-76,-6,-3,-62,-105,10,71,-5,-127,-28,-39,1,36, 
  /* [32][0][][] */ -127,-77,-6,63,55,38,-10,10,2,-38,-102,46,69,4,59,68, 
  /* [33][0][][] */ -20,-27,-41,-7,-101,-8,-63,12,63,19,10,-54,38,-127,108,30, 
  /* [34][0][][] */ 55,-13,60,18,41,13,-51,71,-89,-47,65,14,16,-14,-12,127, 
  /* [35][0][][] */ -40,43,-65,10,-12,-6,28,-112,76,86,-72,-9,5,-17,61,-127, 
  /* [36][0][][] */ -23,4,28,127,37,27,117,9,-8,57,-31,-6,1,25,-58,-31, 
  /* [37][0][][] */ 13,33,9,-79,-11,-10,-35,-37,-103,-31,-11,-22,34,-127,63,-29, 
  /* [38][0][][] */ 38,61,-7,-44,127,1,23,-54,112,76,-14,-12,2,-28,39,12, 
  /* [39][0][][] */ -17,48,-5,-127,-11,9,-60,22,41,-69,-12,-20,9,70,50,37, 
  /* [40][0][][] */ 8,-7,16,-84,-1,-18,-13,-18,-127,-19,-9,-28,28,-85,76,-46, 
  /* [41][0][][] */ -12,3,-46,-13,5,-32,24,7,-32,9,-48,-7,-127,16,23,29, 
  /* [42][0][][] */ 127,99,-31,-26,-66,-55,-26,-41,-6,13,67,-58,-48,43,87,-103, 
  /* [43][0][][] */ -17,127,-104,-14,38,-31,103,10,41,30,-37,8,7,-104,-34,-43, 
  /* [44][0][][] */ -24,-40,19,-25,59,9,-74,-127,-7,7,17,2,0,-25,50,-58, 
  /* [45][0][][] */ 10,75,-127,-47,28,-85,17,-51,-12,13,-4,-76,63,-16,61,-7, 
  /* [46][0][][] */ -3,-2,-19,-79,-18,13,33,-34,-105,-10,2,19,-14,-127,72,-39, 
  /* [47][0][][] */ 17,68,20,-20,127,-18,-16,28,-58,34,-7,23,10,1,124,-28, 
  /* [48][0][][] */ -127,-61,-28,28,60,13,22,-11,-1,-23,-102,38,59,4,67,46, 
  /* [49][0][][] */ 5,17,95,81,122,-1,70,36,-127,-41,-40,-82,8,120,16,-64, 
  /* [50][0][][] */ 13,15,-110,-19,-7,-127,-29,1,-48,-70,16,-22,45,-21,13,9, 
  /* [51][0][][] */ 13,61,37,8,20,-1,1,34,-127,44,1,-101,26,-107,-14,93, 
  /* [52][0][][] */ 9,23,-7,49,34,-5,-2,38,80,81,-17,-63,33,127,60,34, 
  /* [53][0][][] */ -10,-74,-15,-12,-91,-6,-77,-16,55,35,22,-56,22,-127,120,10, 
  /* [54][0][][] */ 71,-6,-48,2,118,69,-127,-47,-103,-17,-32,-78,25,-56,-5,-26, 
  /* [55][0][][] */ 60,-25,15,6,48,-42,-67,-127,-28,-58,-55,6,1,-21,17,-6, 
  /* [56][0][][] */ -20,16,25,-23,-5,-28,-94,70,-11,127,-12,-12,37,6,-5,6, 
  /* [57][0][][] */ 4,35,-48,-27,-47,-56,105,85,-32,20,-9,-4,28,9,127,-2, 
  /* [58][0][][] */ 53,-3,-127,29,78,115,-31,40,-106,-31,16,4,-11,24,-1,-21, 
  /* [59][0][][] */ -82,84,91,12,-73,-65,110,127,12,-3,38,-21,13,4,76,7, 
  /* [60][0][][] */ 7,-6,-59,-14,20,-127,-49,-2,-21,-27,-1,-25,36,-10,11,21, 
  /* [61][0][][] */ 17,-22,8,127,64,22,26,-6,-89,7,19,46,-22,19,29,-64, 
  /* [62][0][][] */ -42,127,20,-50,-24,-12,-69,54,-26,-61,-94,-56,-14,-94,-54,-36, 
  /* [63][0][][] */ -52,15,-25,127,-81,13,-64,-40,-53,-23,-26,-40,27,70,33,35, 
  /* [64][0][][] */ 7,22,-10,46,-6,7,-8,89,22,-13,-14,-42,0,-127,65,-6, 
  /* [65][0][][] */ -16,-58,28,-127,45,-31,57,-51,-21,61,10,-110,-20,2,15,-46, 
  /* [66][0][][] */ 40,-34,70,-30,8,1,-12,100,-3,-81,39,29,25,127,19,87, 
  /* [67][0][][] */ 2,42,-12,-127,-7,0,-75,29,87,-92,-26,-5,22,86,76,42, 
  /* [68][0][][] */ -35,63,127,11,7,-1,-12,18,-39,-35,-20,-17,26,-12,106,-41, 
  /* [69][0][][] */ 127,102,-33,-16,-98,-37,-22,-28,-1,5,103,-55,-57,58,89,-85, 
  /* [70][0][][] */ 32,11,-46,-11,-22,25,47,127,-27,75,-28,9,12,66,-26,14, 
  /* [71][0][][] */ 14,-12,-8,7,8,-82,-3,14,-40,18,-71,4,-127,-6,46,54, 
  /* [72][0][][] */ 15,46,-127,11,10,13,23,107,-46,-42,-8,-5,31,15,-5,15, 
  /* [73][0][][] */ -55,46,40,0,40,-43,-75,-127,18,-94,40,-10,24,-49,53,-20, 
  /* [74][0][][] */ -2,13,41,127,21,-1,-69,87,-68,34,-53,43,7,-117,18,-94, 
  /* [75][0][][] */ -21,21,-49,19,13,3,31,-26,127,36,-12,2,-22,109,-56,-10, 
  /* [76][0][][] */ 0,-21,-3,17,4,-15,-13,58,13,-31,-24,-127,2,-6,8,14, 
  /* [77][0][][] */ -9,66,-44,105,-56,7,100,127,11,26,-18,41,-27,-34,5,-18, 
  /* [78][0][][] */ -5,-25,41,-98,57,-20,-45,17,35,-23,24,-37,7,127,14,46, 
  /* [79][0][][] */ -17,-80,-66,-54,-71,-7,29,-66,127,9,30,57,12,38,44,-54, 
  /* [80][0][][] */ -68,-24,127,-76,10,-29,32,-102,-44,68,-64,-107,14,103,64,-64, 
  /* [81][0][][] */ -43,47,-127,23,65,-125,-18,53,-11,-51,59,-5,34,2,16,-1, 
  /* [82][0][][] */ 127,10,-6,8,10,-114,-22,13,-31,-27,-95,-4,112,0,9,34, 
  /* [83][0][][] */ -38,47,-106,-76,-31,-13,44,-127,72,57,-37,-109,1,48,52,87, 
  /* [84][0][][] */ -25,11,66,-29,8,-19,49,-127,-41,54,-3,-53,21,48,45,1, 
  /* [85][0][][] */ -94,127,29,-117,-76,-22,-20,-8,-47,3,-69,28,-8,-5,-103,-34, 
  /* [86][0][][] */ -5,21,-37,-4,-33,-38,127,32,-2,-32,-5,8,4,21,86,-19, 
  /* [87][0][][] */ -30,-49,7,-118,18,-31,52,-22,1,24,-9,-127,-24,7,12,-47, 
  /* [88][0][][] */ 78,15,41,-23,12,-127,2,38,-83,21,-121,-49,59,23,80,1, 
  /* [89][0][][] */ 17,-20,-65,-44,15,-20,-14,-12,-66,11,32,-64,127,-10,50,-47, 
  /* [90][0][][] */ 11,-42,39,-77,82,-12,-61,91,58,-103,-49,-22,-12,114,31,-127, 
  /* [91][0][][] */ -42,4,-40,-62,16,-16,-23,-77,-11,46,0,-127,-20,-44,30,6, 
  /* [92][0][][] */ -22,21,50,19,3,-127,10,-1,4,-21,-2,-13,10,-25,20,9, 
  /* [93][0][][] */ 39,-17,127,-12,-50,48,22,-34,-34,31,-61,-14,-34,-14,38,10, 
  /* [94][0][][] */ 25,19,-33,-19,17,-14,-10,2,-41,-33,16,-35,127,-21,36,-39, 
  /* [95][0][][] */ 127,91,-13,26,-88,-21,-64,-3,-38,-29,93,-52,-27,17,92,-62, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.00076007854659110308, 0.0013275378150865436, 0.00094380404334515333, 0.00084964156849309802, 0.0011132311774417758, 0.0011257053120061755, 0.00052428001072257757, 0.00072946934960782528, 0.00058374489890411496, 0.00098435068503022194, 0.00045452959602698684, 0.00078380340710282326, 0.00078600458800792694, 0.0032737331930547953, 0.00067977485014125705, 0.00060071074403822422, 0.00035275710979476571, 0.00070102931931614876, 0.0014487456064671278, 0.00095307209994643927, 0.00029032237944193184, 0.00022996980987954885, 0.00030383223202079535, 0.00030087697086855769, 0.00045152055099606514, 0.0016193289775401354, 0.0019122081575915217, 0.0011205767514184117, 0.00059533596504479647, 0.0010867310920730233, 0.00047117611393332481, 0.00069918087683618069, 0.00053992954781278968, 0.00077870179666206241, 0.0009714874904602766, 0.00082109146751463413, 0.00049409817438572645, 0.00066233158577233553, 0.00077263033017516136, 0.00090361980255693197, 0.00058074167463928461, 0.0012696428457275033, 0.00090889650164172053, 0.00058323761913925409, 0.0014564787270501256, 0.00058535044081509113, 0.00079395517241209745, 0.00073443760629743338, 0.00083375262329354882, 0.00062405806966125965, 0.00058258051285520196, 0.00052313617197796702, 0.0016779000870883465, 0.00068318314151838422, 0.001080502406693995, 0.0011562498984858394, 0.001558495219796896, 0.0010678832186385989, 0.0013004222419112921, 0.00050203816499561071, 0.0018225153908133507, 0.0013564428081735969, 0.00065633055055513978, 0.000911962881218642, 0.0015243957750499249, 0.00059231091290712357, 0.00025651385658420622, 0.0004795674467459321, 0.0010523305973038077, 0.001026601530611515, 0.00088702124776318669, 0.00063424574909731746, 0.0019172615138813853, 0.0010751360096037388, 0.00078523892443627119, 0.00062586087733507156, 0.00068559945793822408, 0.00027176141156814992, 0.00028046208899468184, 0.00063708145171403885, 0.00046359855332411826, 0.0004510793078225106, 0.00045097409747540951, 0.00049919256707653403, 0.00039294580346904695, 0.00072550569893792272, 0.0018018122063949704, 0.0004938580677844584, 0.000336994300596416, 0.0014540174743160605, 0.00051399017684161663, 0.0006319716339930892, 0.00088051741477102041, 0.0015875825192779303, 0.0010578610235825181, 0.00049790169578045607, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -2089, 2962, 6398, 2636, -2371, -3279, 15998, 2448, 2637, -1554, 11032, -261, -8235, 2162, 11396, 4921, 13387, 5240, -3305, -4537, 5285, 29747, 25555, 14076, 1345, 726, 3925, 2398, 2199, -4602, 7858, -2713, -262, 3692, 56, 820, 9751, 4079, -2013, 5008, 5553, 5140, 4206, 10141, 3269, 4363, 1577, 7490, 4132, -5355, -6680, 525, -143, -1179, 1805, 10, 157, -602, -3002, 9402, -1031, 1233, -1039, -2172, -3097, 8150, 21356, 2062, -2803, 830, 1085, 2116, 1779, -975, 565, 8770, -452, 17641, 16284, -752, 7964, 1847, -531, 1238, 11729, 8312, 3294, 1506, 5302, 3443, -372, -7828, 583, -1608, -1507, -1968, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00030145869823172688, 0.00052652164595201612, 0.0003743270062841475, 0.00033698073821142316, 0.00044152437476441264, 0.00044647182221524417, 0.00020793740986846387, 0.00028931861743330956, 0.0002315220917807892, 0.00039040841511450708, 0.00018027333135250956, 0.00031086831586435437, 0.00031174134346656501, 0.0012984122149646282, 0.00026960900868289173, 0.00023825099924579263, 0.00013990882143843919, 0.00027803887496702373, 0.00057459447998553514, 0.00037800284917466342, 0.00011514626385178417, 9.1209520178381354e-05, 0.00012050447548972443, 0.00011933236964978278, 0.00017907989968080074, 0.0006422504666261375, 0.00075841078069061041, 0.00044443775550462306, 0.00023611927463207394, 0.00043101405026391149, 0.00018687559349928051, 0.00027730574947781861, 0.00021414425282273442, 0.00030884495936334133, 0.0003853066882584244, 0.00032565733999945223, 0.00019596682977862656, 0.00026269076624885201, 0.00030643690843135118, 0.00035838934127241373, 0.00023033095931168646, 0.00050355959683656693, 0.00036048213951289654, 0.0002313208970008418, 0.00057766155805438757, 0.0002321588690392673, 0.0003148946852888912, 0.00029128909227438271, 0.00033067894401028752, 0.00024751090677455068, 0.00023106027219910175, 0.00020748373935930431, 0.00066548062022775412, 0.00027096079429611564, 0.00042854365892708302, 0.00045858626253902912, 0.00061812286730855703, 0.00042353870230726898, 0.00051576719852164388, 0.00019911595154553652, 0.00072283728513866663, 0.00053798581939190626, 0.00026031065499410033, 0.00036169833038002253, 0.00060459849191829562, 0.00023491949832532555, 0.00010173728514928371, 0.00019020373292732984, 0.00041737029096111655, 0.0004071657604072243, 0.00035180608392693102, 0.00025155147886835039, 0.00076041498687118292, 0.00042641526670195162, 0.00031143767409957945, 0.00024822592968121171, 0.00027191915432922542, 0.00010778469732031226, 0.00011123552394565195, 0.0002526761672925204, 0.00018387021555099636, 0.0001789048983482644, 0.00017886317800730467, 0.00019798734865617007, 0.00015584827633574605, 0.00028774657403118908, 0.00071462604682892561, 0.00019587160204537213, 0.00013365705672185868, 0.00057668541558086872, 0.00020385631069075316, 0.00025064955116249621, 0.00034922658232972026, 0.00062965933466330171, 0.00041956373024731874, 0.00019747536862269044, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 22,47,22,-75,-65,-1,-8,65,-18,-42,-110,-91,-108,104,-57,52,23,83,8,0,-38,-100,-43,18,73,-104,-1,84,41,-83,65,14,-91,90,18,-69,-41,13,-86,-21,-95,-40,98,-70,61,-17,-74,92,-99,77,-92,21,-36,89,1,48,-69,-91,-23,21,-14,63,28,-127,66,-109,-102,46,37,-80,-26,114,-69,32,-54,94,-47,-62,-34,-15,-105,36,56,40,-45,-69,-56,-43,23,33,8,65,-95,-96,-54,43, 
  /* [1][0][][] */ 55,2,96,52,48,-33,13,113,43,45,-66,62,-82,-98,40,-62,-42,-28,58,-43,90,94,-71,-59,76,-15,-21,-41,87,59,-27,-60,-82,-85,-71,-72,48,-68,-45,24,4,109,-10,29,54,-3,-45,42,23,-73,-20,-53,11,-112,-46,-99,44,6,98,11,47,-35,-46,-11,67,-7,12,96,85,77,52,112,-5,40,27,53,81,-57,127,15,-69,103,-86,80,40,20,-110,36,-60,-65,80,-13,-50,9,1,-2, 
  /* [2][0][][] */ 19,-71,-105,-115,-45,-25,79,9,21,-61,-57,-51,37,87,-75,-107,-97,38,-76,18,-83,-47,34,29,-103,87,-36,-70,-17,-47,-75,17,36,-63,56,-14,-95,32,-88,82,68,-26,125,83,-72,-8,64,34,-19,-84,16,96,-115,-81,-4,-80,-59,51,80,125,113,62,-50,93,124,94,-69,-63,-6,33,52,-12,52,5,-6,-77,99,120,-96,-107,-86,127,92,43,-70,48,58,36,83,88,90,100,-41,-38,100,100, 
  /* [3][0][][] */ -78,91,55,-92,109,92,76,72,101,12,39,-65,99,45,105,113,-127,71,-69,95,-73,74,-85,1,101,79,-106,12,56,31,-48,103,-119,25,24,-107,-100,-44,-86,-60,-94,-44,-69,21,-81,-107,-30,-37,-62,98,-39,-103,3,39,97,-76,-97,-105,63,-97,-84,21,-90,-36,-3,89,-60,-38,-45,-49,80,6,92,81,-68,-82,-126,-59,80,-77,56,108,-82,-93,74,-114,99,-94,-35,-115,90,90,-86,-64,28,-44, 
  /* [4][0][][] */ -97,27,95,-3,79,-48,-21,-37,18,73,-98,-78,-72,107,31,-81,96,46,-74,-107,-92,87,-93,-26,-11,-112,93,42,12,-114,127,16,-89,55,-53,-47,111,-19,-110,-95,105,98,-91,-92,-17,93,-40,-37,125,-41,100,108,89,-108,-9,31,-112,-25,94,-33,84,-21,-38,97,-83,30,-103,-76,21,104,47,-10,-43,-12,11,-52,-31,107,-34,61,27,-98,45,6,55,120,36,-70,-32,-9,89,45,95,-65,-111,-112, 
  /* [5][0][][] */ -85,91,-57,-49,12,-40,-43,55,-17,-105,52,35,-88,32,98,97,-117,112,63,1,105,6,-54,99,-127,51,-33,-79,-27,23,60,-5,-77,65,69,32,79,-53,-65,-35,76,-4,-11,-59,95,110,11,-8,19,101,94,49,-103,-42,44,-33,91,-32,-57,64,61,34,-5,51,66,-54,42,52,84,-56,28,7,-92,82,3,-95,-54,50,30,-17,70,107,-83,-43,44,-28,-85,-12,79,105,-47,91,-13,108,9,106, 
  /* [6][0][][] */ 90,9,49,-83,-71,5,61,-75,12,124,35,102,22,-59,8,107,-20,80,86,91,-104,113,105,54,-33,35,-78,-37,-14,-83,7,62,-61,10,73,122,-46,-49,23,53,-80,45,65,21,-82,57,-95,-19,56,113,-30,-26,-32,-97,-40,-76,-34,-38,17,87,20,32,90,22,94,77,-1,43,17,-74,-10,-19,58,-57,124,127,-33,78,-31,-60,30,-30,-51,-88,78,22,-12,94,-18,-98,-49,27,-88,22,50,-92, 
  /* [7][0][][] */ 75,41,-61,-123,100,7,-36,-64,20,-82,-15,-35,-50,107,94,56,73,-7,-24,51,71,-101,-17,-63,98,-75,52,97,-96,-34,-18,9,-127,-47,60,-36,110,-6,-6,-105,-111,32,-64,78,7,-66,-93,-60,58,-48,-38,102,-50,36,57,29,49,-118,-5,-118,16,-78,-49,-66,-11,-62,-115,-103,45,-113,-125,6,-110,65,-36,60,-78,-52,-80,-11,-111,34,3,65,-68,-85,-24,-85,46,112,104,-88,28,-76,86,-115, 
  /* [8][0][][] */ -31,7,-29,1,71,-2,-4,-44,57,-16,85,-54,14,-46,-51,20,52,52,78,-60,65,52,89,-12,-17,-71,18,-11,-35,-21,-45,10,-19,5,-65,127,-12,-58,-6,-39,-7,28,30,28,10,-26,-10,65,53,56,-16,-12,98,16,-3,-56,12,-17,-15,29,-69,51,-52,83,-20,-8,21,-42,-40,20,-42,43,29,48,99,92,72,31,5,1,37,61,0,55,62,-1,-1,57,38,34,-10,80,-69,49,51,-41, 
  /* [9][0][][] */ -31,-41,16,77,17,50,85,32,19,41,68,60,98,57,-27,-22,-15,-52,-91,-64,-81,81,18,-21,-87,-55,-38,35,62,-110,-28,52,-83,-59,116,-37,-42,2,-68,-59,105,91,4,2,42,58,32,-18,-22,-32,-96,-56,-114,32,29,79,-5,-70,19,1,8,-88,26,71,-127,78,71,65,95,-60,-104,19,51,26,44,-110,105,-72,16,-46,-105,-37,87,-76,59,-68,-83,22,-64,94,13,7,-75,39,35,57, 
  /* [10][0][][] */ -97,51,-55,-83,-42,108,-111,-92,91,-81,75,72,6,25,76,-10,98,21,-53,61,-9,-57,-41,77,49,88,-29,-9,-106,-58,-13,-81,77,34,98,-92,112,-75,53,94,77,27,22,47,0,21,-6,-5,-66,127,78,100,113,-79,97,65,34,-28,78,-19,62,57,79,61,-38,101,-2,38,19,-19,79,24,-102,-84,16,56,62,84,70,26,9,25,4,21,19,59,-86,29,-14,32,-62,98,40,95,11,-25, 
  /* [11][0][][] */ 71,46,-81,-90,71,-28,-53,-101,-101,28,31,-23,14,-82,37,-92,-127,58,-31,-63,-50,-53,49,-89,-112,82,54,69,-10,28,-15,27,40,69,-121,-85,-4,103,-67,-78,38,-118,91,-119,70,15,-110,-33,35,73,-63,78,45,-84,-54,-102,-31,67,-103,57,-36,-12,107,-70,50,-41,77,-5,71,81,-62,14,-90,-54,5,-111,-17,57,-86,-25,-104,-22,-119,84,-13,-85,-59,-36,-89,34,-46,-68,75,11,106,-2, 
  /* [12][0][][] */ -77,-60,-88,104,-9,-66,-63,-89,-22,-2,-57,36,-73,-100,-57,64,20,-51,6,99,-99,-42,47,37,-29,78,-81,-7,85,-104,61,69,23,-41,-15,-97,-5,-95,60,48,74,79,33,-92,19,-20,-67,71,-86,91,-64,49,-73,-115,74,34,-22,-87,-105,-111,42,-42,92,-24,-86,-11,-7,-79,-117,-117,35,-30,-127,-83,-29,-28,-123,-36,72,-73,19,52,84,-16,57,-80,-17,-72,-80,-91,-15,1,-113,-96,-123,69, 
  /* [13][0][][] */ 51,54,89,-51,101,31,43,-47,36,-102,44,32,3,93,49,74,83,66,-21,98,120,-6,-1,-67,105,-75,4,-76,28,-91,-44,-4,3,-92,36,2,73,-97,89,39,-6,-57,79,93,66,-6,73,75,-77,93,-55,7,-27,-78,9,103,48,-61,88,-70,-102,-16,69,-45,-77,45,-29,-117,-81,-54,-79,100,-48,-8,99,-21,-34,97,-6,-37,84,41,-4,116,108,-49,-103,81,-46,-47,12,-28,66,127,-27,-74, 
  /* [14][0][][] */ -42,-91,72,57,52,-114,17,-18,-13,35,-34,-78,-26,114,-34,35,-105,-32,-39,-114,-7,36,-61,-43,-66,-19,71,1,80,-106,75,-57,-62,94,125,-1,10,76,-105,-92,108,119,117,15,74,-74,-3,-51,-119,7,-32,-65,-41,-127,89,-112,20,-87,-39,-104,-88,-127,26,-1,-24,61,3,-8,-124,-12,22,-63,-101,-83,39,-29,-90,-23,69,-19,120,-30,121,38,-84,-62,-66,77,57,-9,-84,-63,-14,-105,-69,-56, 
  /* [15][0][][] */ 18,42,-9,-70,-96,127,4,48,-116,-47,94,-42,-17,-58,-50,-43,-38,82,-108,11,-31,-89,-62,-32,-10,-13,90,98,-19,-64,-119,18,50,92,-44,-30,-35,93,-37,-95,-65,105,97,-64,74,46,-81,-94,21,-19,-38,-94,-87,-12,26,7,45,-22,84,-57,-111,-96,-100,-65,-54,23,-22,-81,-19,-78,-90,7,58,40,-9,74,-36,89,-106,-32,-31,-70,-48,-58,-54,-43,92,-41,53,-102,-86,88,-9,-50,103,-80, 
  /* [16][0][][] */ 1,24,-106,127,80,-62,110,114,-35,40,93,-58,-61,96,-115,-26,38,90,-88,-15,-111,-17,-103,21,97,-55,-71,14,-42,98,120,36,-84,-41,30,5,-19,103,-118,73,56,39,89,-53,-92,-7,-94,-54,-20,62,102,79,-54,-116,66,16,42,108,-34,-60,52,-36,5,60,-14,39,77,-38,4,-51,77,24,87,4,49,-86,86,-54,-92,-59,-24,34,-1,-104,102,-59,7,-109,121,-89,87,-119,57,52,87,-88, 
  /* [17][0][][] */ -33,90,-112,-41,-32,118,-55,98,27,-4,91,-19,-39,94,28,-74,18,73,2,127,10,-24,-69,-25,-81,-7,-48,-73,-49,62,56,-85,82,-49,-39,65,35,-64,-15,31,-50,109,-37,-93,108,13,-92,-104,29,-85,-23,-122,-58,8,50,25,-64,68,-37,-77,92,111,55,82,-61,29,-104,60,-72,-77,1,-30,-52,-31,-11,41,-124,-69,102,-86,-67,-14,83,-58,71,25,-59,95,4,112,-45,119,-109,-48,62,-38, 
  /* [18][0][][] */ 64,-50,-66,-15,59,37,-82,-57,-41,69,-55,-24,10,77,24,37,39,68,-21,-29,-54,43,33,40,34,-20,29,-39,7,-51,31,-68,-14,64,68,-8,58,-24,-13,-63,-68,27,87,-17,-11,39,76,-36,71,33,-32,-61,6,3,-22,26,79,21,-93,59,-77,20,73,86,7,27,-65,-85,77,-24,-26,74,-74,78,30,108,28,86,-4,-11,-35,-32,-70,79,15,-31,80,22,60,20,-4,127,-66,5,-6,-81, 
  /* [19][0][][] */ 77,51,-114,67,105,44,-61,5,68,-46,5,-54,53,78,97,-41,35,-102,-51,81,-87,-80,30,111,50,-3,26,-40,83,26,106,-127,47,-26,-86,70,-105,-24,-78,27,61,35,52,53,-50,48,-99,97,104,7,86,-27,39,-93,69,85,34,28,-99,-33,-34,70,115,-50,96,-18,-72,97,95,-3,-104,8,28,67,26,83,8,87,-80,88,-114,-40,103,-89,32,24,92,-84,-73,-10,-6,-3,-18,-81,87,-95, 
  /* [20][0][][] */ -6,-92,-26,60,70,10,75,38,-41,-62,20,-10,-42,-72,4,-82,-22,-41,56,49,55,-99,79,-22,-95,102,-66,-3,-4,-68,-40,12,42,93,80,-68,77,20,-98,20,92,-95,-75,-27,46,19,-30,-39,74,-17,99,-64,-22,87,30,-70,-56,-119,76,3,-23,63,48,59,20,92,28,-70,27,72,-72,23,-86,-78,-50,90,-9,-88,39,-64,17,88,78,-42,51,12,-67,-94,101,19,-127,-67,57,-44,28,60, 
  /* [21][0][][] */ 86,90,69,-67,-30,-98,-67,-24,-28,56,28,-78,-44,-55,-85,-83,-33,-16,-87,-86,-19,49,92,-43,58,51,68,-37,-35,-90,95,-11,-103,34,90,71,-113,-51,-94,31,18,49,-19,20,-67,97,-85,72,51,-117,20,-41,28,-34,-86,-39,-40,-21,85,84,29,-65,22,39,45,43,-57,13,0,-24,-20,19,-16,-57,-36,-9,-63,90,97,53,-39,106,20,-8,-101,-48,28,31,-21,53,-63,17,-9,-81,127,12, 
  /* [22][0][][] */ -28,-59,46,-39,-87,-127,79,43,28,-33,-33,5,-64,23,-37,-95,-93,-17,-92,42,34,88,-22,62,-97,27,-70,38,-44,-82,-65,-86,-86,89,16,25,9,-96,-77,-67,-33,-16,-79,-6,44,-47,90,-76,-75,-34,-90,58,-92,85,-28,29,84,83,-109,74,-66,-41,-11,6,61,-103,-91,-31,48,74,-87,-45,2,62,-83,-28,-101,-91,40,-48,79,-75,-90,-53,30,70,-32,86,18,76,81,-1,-96,61,76,53, 
  /* [23][0][][] */ -31,-12,-6,-33,-105,0,58,10,19,-116,55,-106,-127,81,60,-46,19,41,25,37,50,92,51,-7,30,-44,-66,-86,-95,57,-7,106,64,-59,105,-40,-24,107,64,-73,112,41,96,-100,-94,0,-86,99,21,84,-44,-11,-102,107,67,13,27,12,58,-25,-38,23,75,-121,98,-92,9,-8,81,106,-81,104,98,42,9,-57,-111,9,-90,-27,-104,15,-85,-79,-52,-112,110,-109,-33,-66,-49,-83,11,-33,-58,119, 
  /* [24][0][][] */ -5,99,111,106,67,-11,-113,112,-6,-100,-86,75,38,-1,-11,-70,-32,40,-50,88,122,-27,-24,32,-27,60,-77,-64,79,121,103,-23,112,-46,-13,-18,11,-44,-87,-93,6,113,-80,47,-48,79,53,-68,-97,-74,36,-22,-57,82,118,-44,73,-43,-11,-34,109,49,54,-18,-104,-9,-69,112,60,-80,-24,36,-3,-108,-11,-42,28,-55,-34,79,65,-46,58,-48,-85,-75,-18,-65,-87,80,-62,-17,-70,-77,75,127, 
  /* [25][0][][] */ -31,-13,-9,72,-17,41,-90,28,-11,75,53,28,-74,64,84,-100,-63,0,-59,44,60,94,-38,81,42,-88,-59,-51,45,45,-92,69,-81,-61,88,90,-127,54,-116,98,-95,99,66,-13,-1,-82,-102,-115,-49,-10,-83,-45,3,3,-97,-84,49,-49,113,5,-73,80,-112,31,-77,-85,-93,75,9,13,36,50,-2,68,-49,-13,10,-22,24,-83,-90,-12,-65,33,81,-4,-37,36,-106,99,-78,-3,-25,72,96,65, 
  /* [26][0][][] */ 55,-54,5,-13,93,-109,76,-34,29,-15,-73,1,-35,-55,25,-12,96,3,-42,-88,31,-42,64,70,9,-29,33,59,22,-12,-38,-42,-19,35,21,103,27,65,-98,79,70,2,-27,-70,-11,38,85,6,15,31,66,-24,94,73,40,14,64,3,-66,1,5,127,-68,-74,44,-27,-85,-29,5,-45,32,27,-87,-60,-41,-48,-17,31,-20,48,80,12,-46,-20,-12,-31,-4,-76,15,6,89,76,-42,8,30,-42, 
  /* [27][0][][] */ 57,49,-108,109,-34,-41,-1,-10,-98,102,-35,-17,-126,68,76,-51,45,-119,6,-123,-32,51,86,-96,-106,65,-47,64,86,-68,62,-120,115,-90,23,118,121,52,-87,-49,28,50,-33,62,62,-97,101,-77,-20,-72,60,87,115,57,-127,-98,85,-33,-36,12,28,-50,-114,-90,43,106,21,-105,33,-12,33,-112,17,-82,27,-81,-90,-1,66,25,-66,-87,82,0,-112,-97,55,-39,105,11,45,111,85,18,59,-106, 
  /* [28][0][][] */ -118,108,-57,82,-1,80,-108,-12,59,-77,-102,79,60,-75,21,-106,-81,80,7,102,103,76,4,-90,58,-65,82,97,-58,18,-23,38,-22,18,-32,-72,22,102,-44,121,-95,-28,-6,59,110,110,-14,3,116,8,-119,7,44,-42,26,68,93,43,51,79,50,-56,-6,-127,-91,-6,90,-47,-92,62,66,114,-111,58,96,21,59,-52,-12,76,-72,66,63,-29,55,12,-78,-65,-96,21,62,-95,52,65,-12,108, 
  /* [29][0][][] */ 19,-22,37,15,-31,0,16,-122,-64,-38,-59,-87,64,-27,-89,-29,87,89,-73,95,23,-75,-94,-99,89,-71,-106,-52,-53,83,-70,20,-104,113,105,-2,-32,-103,17,-38,107,-60,-26,29,-90,56,-124,-4,-40,68,17,39,-90,-21,82,87,37,-26,-67,3,112,105,-81,40,73,-94,-126,33,68,-16,-41,-57,-35,-127,-32,-101,-68,28,-5,65,-12,-51,22,-37,18,-124,-75,84,-21,29,-73,-65,-112,-15,-75,-72, 
  /* [30][0][][] */ -86,-101,-96,-61,63,109,46,0,-84,34,21,50,97,49,-115,-125,87,107,127,10,-20,-87,115,-85,20,48,-37,12,73,-51,1,47,-3,-39,16,26,-97,-45,78,-30,-19,-106,-80,-98,77,112,-50,-43,-74,96,-104,-52,-107,-26,88,-110,106,45,-11,-13,-61,-116,41,84,113,90,20,61,92,76,105,-90,21,-115,-93,17,54,-37,-15,-46,44,44,97,36,75,-69,56,32,103,29,59,-112,4,87,-82,-75, 
  /* [31][0][][] */ 50,105,59,-38,-53,-39,101,-73,-91,-50,67,-72,-81,-68,83,34,4,44,-46,-14,-14,-33,105,13,52,100,-32,-65,-7,78,63,42,55,36,57,92,54,108,-21,-67,-1,105,-77,50,14,106,51,-3,-109,-41,-49,67,9,-89,-23,-21,-4,46,19,122,8,-106,121,-102,11,-87,82,-51,-110,37,104,-23,91,-88,-35,61,5,93,60,-96,-8,-1,-98,-67,-26,87,127,-96,-57,86,43,-38,-40,-81,-97,66, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0019470008555799723, 0.0019180967938154936, 0.0017905529821291566, 0.0017820729408413172, 0.0018026658799499273, 0.0019732180517166853, 0.0021152792032808065, 0.0017937823431566358, 0.003022446995601058, 0.0018382379785180092, 0.0019578812643885612, 0.0018394142389297485, 0.0019355675904080272, 0.0018844911828637123, 0.0017462634714320302, 0.0019313567318022251, 0.0017581174615770578, 0.0017907375004142523, 0.0024598503950983286, 0.001836648560129106, 0.0020769557449966669, 0.0021503185853362083, 0.0022373325191438198, 0.0019165192497894168, 0.0017752400599420071, 0.0019313424127176404, 0.0023238945286720991, 0.0018047452904284, 0.0017965553561225533, 0.0017711697146296501, 0.001763393054716289, 0.001848165993578732, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { -258, 589, 54, -342, 508, -59, 1170, -342, 990, -40, 59, -578, -375, 468, -160, -281, 127, -197, 444, -95, -36, -168, -214, -77, -96, -174, -51, -140, -67, -270, -230, 138, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.5811786549165845e-05, 4.5131691877031699e-05, 4.2130657675443217e-05, 4.1931129089789465e-05, 4.2415667849127203e-05, 4.6428660425590351e-05, 4.9771275371313095e-05, 4.2206644138786942e-05, 7.1116402978077531e-05, 4.3252657633274794e-05, 4.6067794755799696e-05, 4.3280335376039147e-05, 4.5542768930317834e-05, 4.4340969907352701e-05, 4.1088551370194182e-05, 4.5443688577506691e-05, 4.1367471567355096e-05, 4.2135001422138885e-05, 5.7878834923030809e-05, 4.3215262849116698e-05, 4.8869547754293308e-05, 5.0595732318470255e-05, 5.2643117669504136e-05, 4.5094569941284135e-05, 4.1770355892367661e-05, 4.5443350245477632e-05, 5.4679872846463695e-05, 4.246459502610378e-05, 4.2271891288692132e-05, 4.1674582462292165e-05, 4.1491603042231873e-05, 4.3486259528435767e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[3*1*1*32] = { 
  /* [0][0][][] */ -41,88,-73,-18,111,-73,-6,-84,127,-19,-38,-73,73,20,-43,-17,-58,-49,-37,46,3,-122,72,-69,7,-20,62,-13,-8,64,-53,117, 
  /* [1][0][][] */ 66,-59,-63,4,11,36,-127,-44,-57,95,67,9,77,64,1,-44,80,9,-76,-72,90,-7,6,37,-57,54,-14,-23,56,6,-50,-29, 
  /* [2][0][][] */ -19,-101,112,91,-2,69,-127,44,-62,32,-99,86,11,-83,93,41,91,-78,-99,87,9,27,18,52,-127,-52,-8,-15,17,79,-50,53, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant42_scale = { 3, { 0.003858873387798667, 0.0042481664568185806, 0.0034546279348433018, } };
const TfArray<3, int> quant42_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[3] = { 20076, -20861, -25851, };
const TfArray<1, int> tensor_dimension43 = { 1, { 3 } };
const TfArray<3, float> quant43_scale = { 3, { 0.00022293713118415326, 0.00024542759638279676, 0.00019958282064180821, } };
const TfArray<3, int> quant43_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.55104953050613403, } };
const TfArray<1, int> quant46_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.43847653269767761, } };
const TfArray<1, int> quant50_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.54809284210205078, } };
const TfArray<1, int> quant53_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.62301182746887207, } };
const TfArray<1, int> quant54_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.32086122035980225, } };
const TfArray<1, int> quant58_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.25639787316322327, } };
const TfArray<1, int> quant61_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.32270899415016174, } };
const TfArray<1, int> quant62_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.22666718065738678, } };
const TfArray<1, int> quant65_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.39661517739295959, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.057772595435380936, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.11556939780712128, } };
const TfArray<1, int> quant69_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
